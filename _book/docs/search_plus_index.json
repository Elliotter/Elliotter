{"./":{"url":"./","title":"Introduction","keywords":"","body":"关于作者 大家好，我是卷发擦边，欢迎来到我的博客！ "},"0_数据结构与算法/动态规划系列/2.栈.html":{"url":"0_数据结构与算法/动态规划系列/2.栈.html","title":"以下是本节的内容","keywords":"","body":"以下是本节的内容 "},"0_数据结构与算法/数据结构系列/1.数组.html":{"url":"0_数据结构与算法/数据结构系列/1.数组.html","title":"以下是本节的内容","keywords":"","body":"以下是本节的内容 "},"0_数据结构与算法/数据结构系列/2.栈.html":{"url":"0_数据结构与算法/数据结构系列/2.栈.html","title":"以下是本节的内容","keywords":"","body":"以下是本节的内容 "},"0_数据结构与算法/面试经典问题/1.股票问题.html":{"url":"0_数据结构与算法/面试经典问题/1.股票问题.html","title":"以下是本节的内容","keywords":"","body":"以下是本节的内容 "},"0_数据结构与算法/面试经典问题/2.背包问题.html":{"url":"0_数据结构与算法/面试经典问题/2.背包问题.html","title":"以下是本节的内容","keywords":"","body":"以下是本节的内容 "},"1_机器学习&深度学习/tensorflow/":{"url":"1_机器学习&深度学习/tensorflow/","title":"tensorflow","keywords":"","body":"关于作者 大家好，我是卷发擦边，欢迎来到我的博客！ dev "},"1_机器学习&深度学习/机器学习/优化算法.html":{"url":"1_机器学习&深度学习/机器学习/优化算法.html","title":"优化算法","keywords":"","body":"优化算法 损失函数 分类问题 交叉熵损失函数 回归问题 平方损失函数：平方损失函数是光滑函数，能够用梯度下降法进行优化。然而，当预测值距离真实值越远时，平方损失函数的惩罚力度越大，因此它对异常点比较敏感。 绝对损失函数相当于是在做中值回归，相比做均值回归的平方损失函数，绝对损 失函数对异常点更鲁棒一些。但是，绝对损失函数在f=y处无法求导数。 Huber损失函数 Huber损失函数在|f−y|较小时为平方损失，在|f−y|较大时为线性损失，处处可导， 且对异常点鲁棒。 梯度下降算法 经典的梯度下降法 采用所有训练数据的平均损失来近似目标函数，大量数据时候计算成本太高 随机梯度下降法（SGD-mini-batch gradient descent） 在实际应用中我们会同时处理若干训练数据，该方法被称为小批量梯度下降法(Mini-Batch Gradient Descent) 存在的缺点 ： 山谷震荡和鞍点停滞的问题 Momentum AdaGrad Adagrad其实是对学习率进行了一个约束。前期较小的时候， regularizer较大，能够放大梯度，后期较大的时候，regularizer较小，能够约束梯度，适合处理稀疏梯度 Adam 经过实验可以发现，优化速度来看：Sgd>Sgdm>Adagrad>Rmsprop>2.78 Sgd与Sgdm比较容易陷入局部较优解，当学习率比较小的时候，容易出不来,sgdm相比sgd多了一个Momentum，训练速度变慢了 Adagrad在学习率比较小的时候容易陷入局部最优解 Rmsprop在学习率比较大的时候容易不稳定 Adam在学习率0.1和0.01时表现都很稳定，都迅速达到了最佳解，但是时间也是最长的 "},"1_机器学习&深度学习/机器学习/概率图模型.html":{"url":"1_机器学习&深度学习/机器学习/概率图模型.html","title":"概率图模型","keywords":"","body":"概率图模型 生成式模型与判别式模型 生成式模型是对特征和标签联合概率分布的建模，判别式模型是对条件概率的建模。即生成式对P(X,y)建模，判别式对P(y|X)建模，用更加容易理解的方式来说明的话，就是判别式模型认为因为拥有特征X所以它的标签为y，而生成式模型认为因为它的标签为y，所以才会生成特征X。这就是两者的主要区别。生成式模型学习得到联合分布之后，通过极大似然法输出使得联合概率分布最大的标签y，判别式模型习得条件概率分布之后，通过极大似然输出标签y。 两种模型的对比： 一般来说, 生成式模型都会对数据的分布做一定的假设, 比如朴素贝叶斯会假设在给定yy的情况下各个特征之间是条件独立的:p(X|y)=∏Ni=1p(xi|y)p(X|y)=∏i=1Np(xi|y), GDA会假设 p(X|y=c,θ)=N(μc,Σc)p(X|y=c,θ)=N(μc,Σc). 当数据满足这些假设时, 生成式模型通常需要较少的数据就能取得不错的效果, 但是当这些假设不成立时, 判别式模型会得到更好的效果. 生成式模型最终得到的错误率会比判别式模型高, 但是其需要更少的训练样本就可以使错误率收敛[限于Genarative-Discriminative Pair, 详见[2]]. 生成式模型更容易拟合, 比如在朴素贝叶斯中只需要计下数就可以, 而判别式模型通常都需要解决凸优化问题. 当添加新的类别时, 生成式模型不需要全部重新训练, 只需要计算新的类别ynewynew和xx的联合分布p(ynew,x)p(ynew,x)即可, 而判别式模型则需要全部重新训练. 生成式模型可以更好地利用无标签数据(比如DBN), 而判别式模型不可以. 生成式模型可以生成xx, 因为判别式模型是对p(x,y)p(x,y)进行建模, 这点在DBN的CD算法中中也有体现, 而判别式模型不可以生成xx. 判别式模型可以对输入数据xx进行预处理, 使用ϕ(x)ϕ(x)来代替xx, 如下图所示, 而生成式模型不是很方便进行替换. 二者所包含的算法： 生成式模型 判别式分析 朴素贝叶斯 K近邻(KNN) 混合高斯模型 隐马尔科夫模型(HMM) 贝叶斯网络 Sigmoid Belief Networks 马尔科夫随机场(Markov Random Fields) 深度信念网络(DBN) 2.判别式模型 线性回归(Linear Regression) 逻辑斯蒂回归(Logistic Regression) 神经网络(NN) 支持向量机(SVM) 高斯过程(Gaussian Process) 条件随机场(CRF) CART(Classification and Regression Tree) "},"1_机器学习&深度学习/机器学习/特征工程.html":{"url":"1_机器学习&深度学习/机器学习/特征工程.html","title":"特征工程","keywords":"","body":"特征工程 特征的归一化 1.什么是特征的归一化 特征的归一化是指消除数据之间的量纲影响，防止某些特征数值过大或者过小影响模型的效果 2.为什么要做特征的归一化 在使用梯度下降的算法中，在学习速率相同的情况下，没有经过归一化的特征之间更新速度是不一致的，经过归一化的特征更新速度变得更为一致，容易更快地通过梯度下降找到最优解。 3.如何解决原始数据不充足的问题 处理的方法主要有两种： 一个是基于模型的角度去考虑，采用降低模型过拟合的措施，比如简化模型（蒸馏，减少非线性），添加约束项缩小假设空间（L1/L2），集成学习，Dropout等方式 从数据角度：数据的扩充，比如图像领域采用旋转，平移，缩放，裁剪，填充等方法，添加噪声，颜色的变换，改变图片的清晰度，对比度，锐度；自然语言处理中，使用同义词替换，随机插入，随机交换（交换两个词的位置），随机删除（随机删除句子中的单词），模型中使用MASk技术 4.模型的评估 准确率accuracy：correct/total,缺点是负样本很多时候，分类器预测全是负样本准确率也很高 精确率presion:分类器正确正样本/分类器预测所有正样本 召回率recall:分类器正确正样本/真正的所有正样本 精确率与召回率存在一定的矛盾地方，recall越高，presion越低，评估模型采用P-R曲线更加合理 P-R曲线的横轴是召回率，纵轴是精确率。对于一个排序模型来说，其P-R曲 线上的一个点代表着，在某一阈值下，模型将大于该阈值的结果判定为正样本， 小于该阈值的结果判定为负样本，此时返回结果对应的召回率和精确率。 F1 score是精准率和召回率调和的平均值 2*(presion*recall)/(presion*recall) 损失函数 1.REMS（均方根误差） 一般情况下，RMSE能够很好地反映回归模型预测值与真实值的偏离程度。但在实际问题中，如果存在个别偏离程度非常大的离群点（Outlier）时，即使离群点 数量非常少，也会让RMSE指标变得很差。 2.MAPE（平均绝对百分比误差） MAPE相当于把每个点的误差进行了归一化，降低了个别离群点带来 的绝对误差的影响。 余弦函数的使用 余弦相似度，余弦距离，欧氏距离 过拟合与欠拟合 过拟合是指模型对于训练数据拟合呈过当的情况，反映到评估指标上，就是 模型在训练集上的表现很好，但在测试集和新数据上的表现较差。欠拟合指的是 模型在训练和预测时表现都不好的情况。 解决过拟合的办法 从数据入手，获得更多的训练数据。 使用更多的训练数据是解决过拟合,或者使用一定的数据扩增 降低模型复杂度。在神经网络中采用降低模型过拟合的措施，比如简化模型（蒸馏，减少非线性），添加约束项缩小假设空间（L1/L2），集成学习，Dropout等方式 解决欠拟合的办法 添加新特征。 增加模型复杂度。 减小正则化系数 "},"1_机器学习&深度学习/自然语言处理/NLP.html":{"url":"1_机器学习&深度学习/自然语言处理/NLP.html","title":"以下是本节的内容","keywords":"","body":"以下是本节的内容 "},"1_机器学习&深度学习/计算机视觉/CV.html":{"url":"1_机器学习&深度学习/计算机视觉/CV.html","title":"以下是本节的内容","keywords":"","body":"以下是本节的内容 "},"2_编程语言/python/1.python内置库.html":{"url":"2_编程语言/python/1.python内置库.html","title":"python常见内置库","keywords":"","body":"python常见内置库 argparse 介绍：是python自带的命令行参数解析包，可以用来方便地读取命令行参数，当你的代码需要频繁地修改参数的时候，使用这个工具可以将参数和代码分离开来，让你的代码更简洁，适用范围更广。 示例:import argparse parser = argparse.ArgumentParser(prog='程序的名称',usage='示例用法',description='更加详细的描述') parser.add_argument('a',help='添加地址参数，在执行python demo.py时候，地址参数是必须按照定义参数顺序执行，并且required，地址参数无-') parser.add_argument('--begin','-b',help='可选参数，--全名 -简写，可选参数可以非必需，无顺序要求') parser.add_argument('--end','-n',type=str,choice=['a','b','c'],help='展示',required=True) args =parser.parse_args() json 介绍: 用来处理python数据对象与json之间相互转换 示例:import json word = {'bar': ('baz', None, 1.0, 2)} 将python基本对象编码成json对象 word_js = json.dumps(word) print(word_js) 将json对象解码成python对象 word_py = json.loads(word_js) print(word_py) python对象转换成json文件 with open('word.json','w') as f: json.dump(word,f) 读取josn文件，转换成python对象 f = open('word.json','r') print(json.load(f)) codecs 编码：将字符编码成字节，即比特流，解码：把字节流解码成字符 name = '编码' name1=name.encode('utf-8') name2=name1.decode('utf-8') name3=name2.encode('gbk') name4=name3.decode('gbk') print(type(name)) print(name1) print(type(name2)) print(name3) print(name4) logging 把日志分为debug， info， warning， error， criticl import logging logging.basicConfig(level=logging.ERROR) logging.debug(\"debug\") logging.info(\"info\") logging.warning(\"warning\") logging.error(\"error\") logging.critical(\"critical\") logging.basicConfig(level = logging.ERROR) logging.debug(\"debug\") logging.info(\"info\") logging.warning(\"warning\") logging.error(\"error\") logging.critical(\"critical\") 进程与线程 创建线程 import threading import time def sing(): for i in range(5): print(\"sing\") time.sleep(0.25) def dance(): for i in range(5): print(\"dance\") time.sleep(0.25) thread1 =threading.Thread(target=sing) thread2 =threading.Thread(target=dance) thread1.start() thread2.start() thread2.join() 线程阻塞 thread3 =threading.Thread(target=sing) thread4 =threading.Thread(target=dance) thread3.start() thread3.join() thread4.start() 线程计数 threading.active_count() threading.current_thread() threading.get_ident() threading.Thread(target=sing,args=(参数按元组方式),kwargs={参数按字典方式}) thread1.join()#一直等待到这个线程结束 其它阻塞的方法 lock = threading.Lock() lock.acquire() lock.release() random import random import string 随机产生1-50整数 print(random.randint(1,50)) 随机产生0-102之间奇数 print(random.randrange(0,102,1)) 随机产生0-102之间偶数 print(random.randrange(0,102,1)) 随机浮点数0-1 print(random.random()) 随机浮点数0-10 print(random.uniform(1,10)) 随机选择 print(random.choice('abcdefghijklmnopqrstuvwxyz!@#$%^&*()')) 随机选择5个 print(random.sample('zyxwvutsrqponmlkjihgfedcba',5)) 打乱 items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0] random.shuffle(items) print(items) collection from collections import Counter items = ['A','A','B'] count = Counter(items) 对所有进行统计数量 for index,c in count.items(): print(index,c) 数量最多 print(count.most_common(1)) 处理字符串 Counter('abracadabra').most_common(3) 生成一个 a = Counter(a=4, b=2, c=0, d=-2) b = Counter(a=1, b=2, c=3, d=4) print(a.subtract(b)) deque from collections import deque d = deque('abcdef') for i in d: print(i) 右append d.append('g') 左append d.appendleft('h') print(d) 右pop print(d.pop()) 左pop print(d.popleft()) 全体右移动1位，最右边放左边 d.rotate(1) print(d) 全体左移动1位，最左边放左边 d.rotate(-1) print(d) defaultdict from collections import defaultdict s = [('yellow',2),('blue',1),('yellow',1),('blue',3)] d = defaultdict(list) for i ,j in s: d[i].append(j) print(d) 等价于 d ={} for i ,j in s: d.setdefault(i,[]).append(j) print(d) s = 'mississippi' d =defaultdict(int) for i,j in enumerate(s): d[j]+=1 print(d) 任意默认数值 def default_value(value): return lambda : value d = defaultdict(default_value(\"value\")) d.update(name='John', action='ran') print(d) OrderedDict from collections import OrderedDict d = {'banana': 3, 'apple': 4, 'pear': 1, 'orange': 2} od = OrderedDict(sorted(d.items(),key=lambda x:x[1])) "},"2_编程语言/python/2.常见的itertools.html":{"url":"2_编程语言/python/2.常见的itertools.html","title":"常见的itertools","keywords":"","body":"常见的itertools 遍历元素 1. 多个iterator横向合并 [1,2,3] , [4,5,6,7] => [1, 2, 3, 4, 5, 6, 7] nums = [1,2,3] nums_a = [4,5,6,7] list(chain(nums,nums_a)) 2. 多个iterator纵向合并 [1,2,3],[4,5,6,7] =>[(1, 4), (2, 5), (3, 6)] list(zip(nums,nums_a)) 元素允许缺失可以使用zip_longest [1,2,3],[4,5,6,7] => [(1, 4), (2, 5), (3, 6), (None, 7)] list(zip_longest(nums,nums_a)) 组合遍历 nums = [1,2,1] nums_a = [4,5] 1. A*B笛卡尔积: [(1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5)] list(product(nums, nums_a)) 2. A*A笛卡尔积(考虑一半元素，不包含自身): [1,2,1] => [(1, 2), (1, 1), (2, 1)] print(list(combinations(nums,2))) 3. A*A笛卡尔积(考虑一半元素，包含自身): [1,2,1] => [(1, 1), (1, 2), (1, 1), (2, 2), (2, 1), (1, 1)] print(list(combinations_with_replacement(nums, 2))) 其他的iterator 1.从1开始，step+1的iterator count(1,1) 2.循环元素 cycle([1,2,3]) 3.切片 start end step islice('ABCDEFG', 2) # A B islice('ABCDEFG', 2, 4) # C D islice('ABCDEFG', 2, None) # C D E F G islice('ABCDEFG', 0, None, 2) #> A C E G "},"2_编程语言/python/3.特殊函数.html":{"url":"2_编程语言/python/3.特殊函数.html","title":"特殊函数","keywords":"","body":"特殊函数 map函数的使用 map(函数,iterator1,iterator2...)，如果存在多个iterator，写在一起,iterator个数与函数参数个数一致 [1,2] + [3,4] => [4, 6] num = [1,2] nums_a =[3,4] list(map(add,num,nums_a)) starmap函数的使用 starmap(函数,iterators)，iterators元组长度与函数参数个数一致 [1,2] +add => [1,3] list(starmap(add,zip(num,nums_a))) reduce函数的使用 reduce(函数,iterator)，返回iterator计算汇总值，不会返回每一步计算值 [1,2] + add => [2] reduce(add,num) accumulate函数的使用 accumulate(iterator,函数),返回每一步计算值 [1,2] + add => [1,2] list(accumulate([1,2],add)) filter函数的使用 filter(函数,iterator),返回符合函数的元素 list(filter(lambda x:x>1,num)) filterfalse函数的使用 filterfalse(函数,iterator),返回不符合函数的元素 list(filterfalse(lambda x:x>1,num)) dropwhile函数的使用 dropwhile(函数,iterator),第一次出现false,输出后续所有元素 list(filterfalse(lambda x:x>1,num)) takewhile函数的使用 takewhile(函数,iterator),第一次出现false,输出前面所有元素 list(takewhile(lambda x:x>1,num)) "},"4_常见工具/gitbook的使用/发布至github.html":{"url":"4_常见工具/gitbook的使用/发布至github.html","title":"发布到 GitHub Pages","keywords":"","body":"发布到 GitHub Pages 除了能够将书籍发布到 GitBook.com 外，还可以将书籍发布到 GitHub Pages，由于没有找到官方文档，所以这里记录的是我自己正在使用的一种方法。 如果读者不了解 GitHub Pages 为何物，简单说就是一个可以托管静态网站的 Git 项目，支持使用 markdown 语法以及 Jekyll 来构建，或者直接使用已经生成好的静态站点。详细可以参考 GitHub Pages 主页。 由于 gitbook 书籍可以通过 gitbook 本地构建出 site 格式，所以可以直接将构建好的书籍直接放到 GitHub Pages 中托管，之后，可以通过如下地址访问书籍： .github.io/ 例如：这本书中使用的例子 'test' 项目可以通过地址：chengweiv5.github.io/test 来访问。 当访问 chengweiv5.github.io/test 时，会访问 chengweiv5/test 项目的 gh-pages 分支的内容，所以需要为项目创建一个 gh-pages 分支，并且将静态站点内容放入其中。也就是说，test 项目将有如下两个分支： master, 保存书籍的源码 gh-pages, 保存书籍编译后的 HTML 文件 构建书籍 首先，使用 gitbook build 将书籍内容输出到默认目录，也就是当前目录下的 _book 目录。 $ gitbook build Starting build ... Successfully built! $ ls _book GLOSSARY.html chapter1 chapter2 gitbook glossary_index.json index.html search_index.json 创建 gh-pages 分支 执行如下命令来创建分支，并且删除不需要的文件： $ git checkout --orphan gh-pages $ git rm --cached -r . $ git clean -df $ rm -rf *~ 现在，目录下应该只剩下 _book 目录了，首先，忽略一些文件： $ echo \"*~\" > .gitignore $ echo \"_book\" >> .gitignore $ git add .gitignore $ git commit -m \"Ignore some files\" 然后，加入 _book 下的内容到分支中： $ cp -r _book/* . $ git add . $ git commit -m \"Publish book\" 上传书籍内容到 GitHub 现在，可以将编译好的书籍内容上传到 GitHub 中 test 项目的 gh-pages 分支了，虽然这里还没有创建分支，上传和创建会一步完成！ $ git push -u origin gh-pages Counting objects: 49, done. Delta compression using up to 4 threads. Compressing objects: 100% (45/45), done. Writing objects: 100% (49/49), 1.34 MiB | 131.00 KiB/s, done. Total 49 (delta 5), reused 0 (delta 0) To https://github.com/chengweiv5/test.git * [new branch] gh-pages -> gh-pages Branch gh-pages set up to track remote branch gh-pages from github. "},"4_常见工具/gitbook的使用/本地的安装与构建.html":{"url":"4_常见工具/gitbook的使用/本地的安装与构建.html","title":"本地的安装与构建","keywords":"","body":"感谢大佬@ [chengweiyang](http://www.chengweiyang.cn/gitbook/index.html)的分享 本地的安装与构建 安装 gitbook 的安装非常简单，详细指南可以参考 gitbook 文档。 这里的安装只需要一步就能完成！ $ npm install gitbook-cli -g 需要注意的是：用户首先需要安装 nodejs，以便能够使用 npm 来安装 gitbook。 基本使用 gitbook 的基本用法非常简单，基本上就只有两步： 使用 gitbook init 初始化书籍目录 使用 gitbook serve 编译书籍 下面将结合一个非常简单的实例，来介绍 gitbook 的基本用法。 gitbook init 首先，创建如下目录结构： $ tree book/ book/ ├── README.md └── SUMMARY.md 0 directories, 2 files README.md 和 SUMMARY.md 是两个必须文件，README.md 是对书籍的简单介绍： $ cat book/README.md # README This is a book powered by [GitBook](https://github.com/GitbookIO/gitbook). SUMMARY.md 是书籍的目录结构。内容如下： $ cat book/SUMMARY.md # SUMMARY * [Chapter1](chapter1/README.md) * [Section1.1](chapter1/section1.1.md) * [Section1.2](chapter1/section1.2.md) * [Chapter2](chapter2/README.md) 创建了这两个文件后，使用 gitbook init，它会为我们创建 SUMMARY.md 中的目录结构。 $ cd book $ gitbook init $ tree . ├── README.md ├── SUMMARY.md ├── chapter1 │ ├── README.md │ ├── section1.1.md │ └── section1.2.md └── chapter2 └── README.md 2 directories, 6 files 注意：在我的实验中，gitbook init 只支持两级目录！ gitbook serve 书籍目录结构创建完成以后，就可以使用 gitbook serve 来编译和预览书籍了： $ gitbook serve Press CTRL+C to quit ... Live reload server started on port: 35729 Starting build ... Successfully built! Starting server ... Serving book on http://localhost:4000 gitbook serve 命令实际上会首先调用 gitbook build 编译书籍，完成以后会打开一个 web 服务器，监听在本地的 4000 端口。 现在，可以用浏览器打开 http://127.0.0.1:4000 查看书籍的效果 "},"4_常见工具/git的使用/1. 版本的创建与退回.html":{"url":"4_常见工具/git的使用/1. 版本的创建与退回.html","title":"创建版本库","keywords":"","body":"感谢大佬@ [liaoxuefeng](https://www.liaoxuefeng.com/)的分享 创建版本库 通过git init命令把目录变成Git可以管理的仓库 $ git init 文件版本的退回 丢弃工作区 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态； 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。 总之，就是让这个文件回到最近一次git commit或git add时的状态 git checkout -- readme.txt 丢弃暂存区 第一步用命令git reset HEAD ，就回到了上述丢弃工作区场景 第二步按之前操作git checkout -- 撤销提交版本 使用git log命令查看历史记录,你看到的一大串类似1094adb...的是commit id（版本号）git log 准备把readme.txt回退到上一个版本，也就是my first commit的那个版本,首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。 现在，我们要把当前版本回退到上一个版本，就可以使用git reset命令：git reset --hard HEAD^ 如果想撤销回退，该怎么办呢？只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个commit id是1094adb...，于是就可以指定回到未来的某个版本：git reset --hard 1094a Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向想要恢复的版本，git会记录每次提交，使用git reflog用来记录你的每一次命令：git reflog 小结 git add .将工作区修改添加至暂存区，git commit -m \"comment\"把暂存区的所有内容提交到当前分支 git checkout -- readme.txt这个文件回到最近一次git commit或git add时的状态 git reset HEAD 丢弃暂存区 git reset --hard HEAD^或者git reset --hard 1094a回到之前版本,版本号可以通过git log查看 git reflog查看命令历史要重返未来，以便确定要回到未来的哪个版本。 "},"4_常见工具/git的使用/2. 分支的管理.html":{"url":"4_常见工具/git的使用/2. 分支的管理.html","title":"分支的管理","keywords":"","body":"分支的管理 分支的创建与合并 git使用指针HEAD指向工作的分支，一般主分支为master,而master指向每次的commit,所以每次提交，master都会往前走一步，当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上： 创建dev分支，然后切换到dev分支： git checkout -b dev 如果只是切换分支，只需要git checkout dev就可以了。 然后，用git branch命令查看当前分支： git branch命令会列出所有分支，当前分支前面会标一个*号。 现在，我们把dev分支的工作成果合并到master分支上： git checkout master git merge dev git merge命令用于合并指定分支到当前分支 之后就可以删除dev分支git branch -d dev 冲突的解决 如果master分支和dev分支各自都分别有新的提交，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突 $ git status On branch master Your branch is ahead of 'origin/master' by 2 commits. (use \"git push\" to publish your local commits) You have unmerged paths. (fix conflicts and run \"git commit\") (use \"git merge --abort\" to abort the merge) Unmerged paths: (use \"git add ...\" to mark resolution) both modified: readme.txt no changes added to commit (use \"git add\" and/or \"git commit -a\") 我们可以直接查看readme.txt的内容： Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage. Git tracks changes of files. >>>>>> feature1 Git用，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存再提交： 小结 查看分支：git branch 创建分支：git branch 切换分支：git checkout 或者git switch 创建+切换分支：git checkout -b 或者git switch -c 合并某分支到当前分支：git merge 删除分支：git branch -d 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。 用git log --graph命令可以看到分支合并图。 "},"4_常见工具/git的使用/3. 远程仓库的管理.html":{"url":"4_常见工具/git的使用/3. 远程仓库的管理.html","title":"远程仓库的管理","keywords":"","body":"远程仓库的管理 添加远程仓库 git remote add origin git@xxxxx.git 本地同步远程 把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。 git push origin master 克隆远程库 用命令git clone克隆一个本地库： $ git clone git@xxxx.git "},"4_常见工具/markdown的使用/Markdown的语法.html":{"url":"4_常见工具/markdown的使用/Markdown的语法.html","title":"Markdown的语法","keywords":"","body":"Markdown的语法 Markdown语法主要分为如下几大部分： 标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \\，符号'`'。 标题 两种形式：1）使用=和-标记一级和二级标题。 一级标题=========二级标题--------- 效果： 一级标题 二级标题 2）使用#，可表示1-6级标题。 ### 三级标题#### 四级标题##### 五级标题###### 六级标题 效果： 三级标题 四级标题 五级标题 六级标题 段落 段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。 区块引用 在段落的每行或者只在第一行使用符号>,还可使用多个嵌套引用，如： > 区块引用>> 嵌套引用 效果： 区块引用 嵌套引用 代码区块 代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如普通段落： void main() { printf(\"Hello, Markdown.\"); } 代码区块： void main() { printf(\"Hello, Markdown.\"); } 注意:需要和普通段落之间存在空行。 强调 在强调内容两侧分别加上*或者_，如： *斜体*，_斜体_**粗体**，__粗体__ 效果： 斜体，斜体粗体，粗体 列表 使用·、+、或-标记无序列表，如： -（+*） 第一项 -（+*） 第二项 - （+*）第三项 注意：标记后面最少有一个空格或制表符。若不在引用区块中，必须和前方段落之间存在空行。 效果： 第一项 第二项 第三项 有序列表的标记方式是将上述的符号换成数字,并辅以.，如： 1 . 第一项2 . 第二项3 . 第三项 效果： 第一项 第二项 第三项 分割线 分割线最常使用就是三个或以上*，还可以使用-和_。 链接 链接可以由两种形式生成：行内式和参考式。行内式： [younghz的Markdown库](https:baidu.com\")。 效果： younghz的Markdown库。 参考式： [younghz的Markdown库1][1][younghz的Markdown库2][2][1]:https:baidu.com \"Markdown\"[2]:https:baidu.com \"Markdown\" 效果： younghz的Markdown库1younghz的Markdown库2 注意：上述的[1]:https:://github.com/younghz/Markdown \"Markdown\"不出现在区块中。 图片 添加图片的形式和链接相似，只需在链接的基础上前方加一个！。 反斜杠\\ 相当于反转义作用。使符号成为普通符号。 符号'`' 起到标记作用。如： `ctrl+a` 效果： ctrl+a 其它： 列表的使用(非traditonal markdown)： 用|表示表格纵向边界，表头和表内容用-隔开，并可用:进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。 代码库 链接 MarkDown https://github.com/younghz/Markdown MarkDownCopy https://github.com/younghz/Markdown 关于其它扩展语法可参见具体工具的使用说明。 "},"4_常见工具/vim的使用/1.光标的移动.html":{"url":"4_常见工具/vim的使用/1.光标的移动.html","title":"光标的移动","keywords":"","body":"感谢大佬@ [dofy](https://dofy.gitbook.io/learn-vim/)的分享 光标的移动 欢迎进入第一章，这一章将学习简单的光标移动操作。 如果你已经有了一定基础，这部分可以略过，直接 G 到文档尾部按照操作进入下一章。 移动光标 单位级 h 向左一字符 j 下一行 k 上一行 l 向右一字符 单词级 w or W 向右移动到下一单词开头 e or E 向右移动到单词结尾 b or B 向左移动到单词开头 注意：所有小写单词都是以分词符作为单词界限，大写字母以空格作为界限 在下面字符块中感受一下各种移动吧！ This project's GitHub url is https://github.com/dofy/learn-vim Please clone it to your local folder and open the first file which is named file-one.md via following command \"vim file-one.md\" and welcome to https://yahaha.net :) 块级 gg 到文档第一行 G 到文档最后一行 0 到行首（第 1 列） ^ 到第一个非空白字符 $ 到行尾 H 移动到屏幕顶端 M 移动到屏幕中间 L 移动到屏幕底部 Ctrl-d 向下移动半页 Ctrl-u 向上移动半页 Ctrl-f 向下移动一页 Ctrl-b 向上移动一页 : or gg 跳转到第 N 行 :+ or j 向下跳 N 行 :- or k 向上跳 N 行 注意：所有命令前都可以加一个数字 N，表示对后面的命令执行 N 次，例如你想向下移动 3 行，除了 可以用 :+3 之外，还可以用 3j 来实现同样的效果。另外，上面实际上有两种命令：一种是键入后 立即执行的，比如 gg；还有一种是先输入 : 的（后面还会出现先按 / 的），这类命令需要在 输入完成后按回车执行，后面的教程中也是一样。 现在你可以在当前文件中畅游了，当你熟悉了各种移动操作后就可以通过 G 定位到当前文档到最后 一行，按照提示进入下一章了。 将光标定位到后面文件名的任意位置上，直接敲键盘 gf 进入第二章。 "},"4_常见工具/vim的使用/2.打开文件、查找内容.html":{"url":"4_常见工具/vim的使用/2.打开文件、查找内容.html","title":"打开文件、查找内容","keywords":"","body":"打开文件、查找内容 打开文件 哈，现在你已经在无意间学会了一种在 Vim 中打开文件的方式，虽然这种方式并不是最常用的，但却是最 直接的，尤其是当你的代码中 include 了某文件时，下面介绍另外两种常用的打开方式。 在 Vim 中打开文件 :e 打开名为 filename 的文件，若文件不存在则创建之 :Ex 在 Vim 中打开目录树，光标选中后回车打开对应文件（提示：- 进入上级目录） 查找 文档内查找 * 向后查找光标当前所在单词 # 向前查找光标当前所在单词 / 向后查找指定字符串 ? 向前查找指定字符串 n 继续查找下一个 N 继续查找上一个 注意： n 和 N 是有方向性的，若你之前通过 * 查找，则 n 会继续向文档尾方向查找，N 向文档首方向；反之，若你通过 # 查找，则 n 指向文档首，N 指向文档尾 行内查找 f 当前行内向行尾方向查找并定位到字符 X t 当前行内向行尾方向查找并定位到字符 X 之前 F 当前行内向行首方向查找并定位到字符 X T 当前行内向行首方向查找并定位到字符 X 之后 ; 继续向当前方向查找下一个字符 , 向当前相反方向查找下一个字符 当前文档中有几个 “Vim” 单词，你可以尝试用 * 和 # 进行查找并感受 n 和 N 的方向性。 上面的 “注意” 中有几个字符 \"n\"，你可以在那试试行内查找并感受下 ; 和 , 的方向性。 匹配查找 Vim 中可以使用 % 对 ( 和 )，[ 和 ]，{ 和 } 进行匹配查找，当光标位于其中一个 符号上时，按下 %，光标会跳到与之匹配的另外一个符号上。 在下列文本中的 ()[]{} 字符上按 % 看看效果，连续多按几次。 (function(win, doc) { var n = ((1 + 2) * (3 + 4)) / 7; var a = [1, 2, 3, 4, 5, 6, 7]; var f = function(b) { if(b) { return false; } else { return true; } }; })(window, document); 下一章将介绍文档的修改，在这之前先简单介绍一下 Vim 的 buffer，简单理解 buffer 就是当前 Vim session 的文件历史记录。 现在你的 buffer 中应该已经有两个文件了，你可以用 :buffers 或 :ls 命令查看，看到 buffer 列表了吧，大概是这个样子的： :ls 1 #h \"file-one.md\" line 47 2 %a \"file-two.md\" line 1 Press ENTER or type command to continue 接下来你可以尝试通过以下命令在文件缓存中进行跳转了 :bn 打开缓存中下一个文件 :bp 打开缓存中上一个文件 :b 打开缓存中第 N 个文件 你也可以使用 :bdelete 来删除所要关闭的缓冲区，缩写 :bd。 当然你也可以使用 :Ex 命令，选择 file-three.md 并打开，进入第三章。 "},"4_常见工具/vim的使用/3.文档的修改与保存.html":{"url":"4_常见工具/vim的使用/3.文档的修改与保存.html","title":"文档的修改与保存","keywords":"","body":"文档的修改与保存 修改文档 你现在已经学会了控制光标、打开文件、切换文件、并在文件中查找内容，这些操作都是在 Vim 的 normal 模式下进行的。现在，是时候进入 Vim 的另外一种模式 —— insert 模式，学习一下如何修改文件了。 插入 i 当前字符前插入 a 当前字符后插入 I 行首插入 A 行尾插入 o 在下一行插入 O 在上一行插入 注意：以上任何一个命令都会使 Vim 进入 insert 模式，进入该模式后光标会发生变化，这时输入的 文字会直接出现在文档中，按 Esc 键或 Ctrl-[ 或 Ctrl-C 退出 insert 模式。 删除（并保存到 Vim 剪贴板） s 删除当前字符，并进入 INSERT 模式 S 删除当前行并保存到 Vim 剪贴板，同时进入 INSERT 模式（等同于 cc） x 删除当前字符，相当于 insert 模式下的 Delete X 删除前一个字符，相当于 insert 模式下的 Backspace dd 删除当前行，并将删除的内容保存到 Vim 剪贴板 d 删除指定内容并保存到 Vim 剪贴板 cc 删除当前行并保存到 Vim 剪贴板，同时进入 INSERT 模式 c 删除指定内容并保存到 Vim 剪贴板，同时进入 INSERT 模式 说明： 部分是对操作内容的描述，如果要删除一个单词，就输入 dw 或者 de，要复制当前 位置到行尾的内容，就输入 y$，要删除后面 3 个字符并插入，就输入 c3l 诸如此类。 复制 yy 复制当前行到 Vim 剪贴板 y 复制指定内容到 Vim 剪贴板 粘贴 p 在当前位置后粘贴 P 在当前位置前粘贴 合并 J 将当前行与下一行合并 尝试在下面的文本中进行复制粘贴练习 删除这一行 粘贴到这一行下面 剪切 ABC 并把它粘贴到 XYZ 前面，使这部分内容看起来像 剪切 并把它粘贴到 ABC XYZ 前面。 替换 r 将当前字符替换为 X gu 将指定的文本转换为小写 gU 将指定的文本转换为大写 :%s/// 查找 search 内容并替换为 replace 内容 尝试修改下列文本的大小写 Change this line to UPPERCASE, THEN TO lowercase. 还有个更好玩的命令 g~，先将光标定位到上面那行文本，执行 0g~$ 看看发生了什么。 撤销、重做 u 撤销 Ctrl-r 重做 保存文件 :w 保存当前文件 :wa 保存全部文件 :wq or ZZ 保存并退出 :q! or ZQ 强制退出，不保存 :saveas 文件另存为 :w 文件另存一份名为 的副本并继续编辑原文件 你可以试着把当前（也许已经改得面目全非的）文件另存一份，然后继续下一章的学习。 "},"4_常见工具/vim的使用/4.一些小技巧.html":{"url":"4_常见工具/vim的使用/4.一些小技巧.html","title":"一些小技巧","keywords":"","body":"一些小技巧 简单设置 Vim “工欲善其事，必先利其器”。尽管 Vim 非常强大，但默认配置的 Vim 看起来还是比较朴素的，为了适合 我们的开发需求，要对 Vim 进行一些简单的配置。 :set number 显示行号 :set relativenumber 显示相对行号（这个非常重要，慢慢体会） :set hlsearch 搜索结果高亮 :set autoindent 自动缩进 :set smartindent 智能缩进 :set tabstop=4 设置 tab 制表符所占宽度为 4 :set softtabstop=4 设置按 tab 时缩进的宽度为 4 :set shiftwidth=4 设置自动缩进宽度为 4 :set expandtab 缩进时将 tab 制表符转换为空格 :filetype on 开启文件类型检测 :syntax on 开启语法高亮 这里列出的是命令，你可以通过在 Vim 中输入进行设置，但这种方式设置的参数只在本次关闭 Vim 前生效， 如果你退出 Vim 再打开，之前的设置就失效了。 若要永久生效，需要修改 Vim 的一个自动配置文件，一般文件路径是 /home//.vimrc（Linux 系统）或 /Users//.vimrc（Mac OS 系统） 如果没有就新建一个，以 Mac OS 系统为例： 在控制台执行如下命令，每行结尾记得回车 cd ~ vim .vimrc 现在你已经在 Vim 中打开了你的 Vim 专属配置文件，将上面提到的配置复制到你的文件中，记得要删除 每行开头的 : 修改完成执行 :wq 或者 ZZ 保存退出，再次进入 Vim 时，你的这些配置就已经生效了 当然，机智如我也为你准备好了一份 vimrc 样本文件，你可以在控制台执行 cp vimrc.vim ~/.vimrc 直接使用，再次启动 Vim 或在 Vim 中执行 :source ~/.vimrc你的配置就 应该生效了。 [ AD ] 当然你也可以在我维护的另外一个项目 The 7th Vim 中找到一个更为完整的配置方案。 清除搜索高亮 前面提到的配置中，有一项是高亮全部搜索结果 :set hlsearch，其作用是当你执行 / 、?、* 或 # 搜索后高亮所有匹配结果。 如果你已经设置了这个选项，尝试执行 /set 看到效果了吧，搜索结果一目了然，但这有时候也是一种困扰，因为知道搜索结果后高亮就没用了，但高亮 本人并不这样认为，它会一直高亮下去，直到你用 :set nohlsearch 将其关闭。 但这样需要就打开，不需要就关闭也不是个办法，有没有更好的解决方案呢？当然！请看下面的终极答案： 再搜一个不存在的字符串 通常我用来清除搜索高亮的命令是 /lfw，一是因为 lfw 这个组合一般不会出现（不适用于 本文档...），二是这三个字母的组合按起来比较舒服，手指基本不需要怎么移动（你感受一下）。 重复上一次命令 Vim 有一个特殊的命令 .，你可以用它重复执行上一个命令。 按下面的说明进行操作 按 dd 删除本行 按 . 重复删除操作 2. 再删除两行 这行也没了 p 把刚才删掉的粘回来 3. 又多出 6 行 缩进 >> 向右缩进当前行 向左缩进当前行 在这一行上依次按 3>>， 和 看看效果 打酱油行 自动排版 == 自动排版当前行 gg=G 当前文档全文自动排版 == 对从当前行开始的 N 行进行自动排版 =j 对当前行以及向下 N 行进行自动排版 =k 对当前行以及向上 N 行进行自动排版 另外，还可以利用第二章中提到的匹配搜索对代码块进行批量排版，尝试用 gf 命令打开 file-four-demo.js 按照里面的说明进行操作 如果智能缩进设置生效了，执行后会看到如第二章中一样的排版效果。 下一章将介绍分屏和标签页。 "},"4_常见工具/vim的使用/5.分屏与标签页.html":{"url":"4_常见工具/vim的使用/5.分屏与标签页.html","title":"分屏与标签页","keywords":"","body":"分屏与标签页 窗口分屏 工作中经常会遇到这种情况，就是需要参照其他文档编辑当前文档（场景：翻译），或者从另外一个文档 copy 代码到当前文档（场景：复制 html 元素类名到 css 文档），这时候就是你最需要分屏的时候。 分屏方式 :split 缩写 :sp or Ctrl-w s 上下分屏 :vsplit 缩写 :vs or Ctrl-w v 左右分屏 :diffsplit 缩写 :diffs diff 模式打开一个分屏，后面可以加上 {filename} 窗口跳转 Ctrl-w w 激活下一个窗口 Ctrl-w j 激活下方窗口 Ctrl-w k 激活上方窗口 Ctrl-w h 激活左侧窗口 Ctrl-w l 激活右侧窗口 移动分屏 Ctrl-w L 移动到最右侧 Ctrl-w H 移动到最左侧 Ctrl-w K 移动到顶部 Ctrl-w J 移动到底部 注意：区分大小写。另外，可以将底部的屏幕移动到右侧，实现上下分屏到左右分屏的转换。 屏幕缩放 Ctrl-w = 平均窗口尺寸 Ctrl-w + 增加高度 Ctrl-w - 缩减高度 Ctrl-w _ 最大高度 Ctrl-w > 增加宽度 Ctrl-w 缩减宽度 Ctrl-w | 最大宽度 实践！实践！实践！ 标签页 第二章中提到过的 buffer 和刚刚讲到的分屏操作都很适合在少量文件之间进行切换， 文件超过 3 个我觉得就不方便了，而标签页则更适合多文件之间的切换。 创建标签页 :tabnew or :tabedit 缩写 :tabe 打开新标签页 Ctrl-w gf 在新标签页中打开当前光标所在位置的文件名 注意：:tabnew 和 :tabedit 后面都可以跟一个 用以在新标签页中 打开指定文件，还可以在 : 后面加一个数字，指出新标签页在列表中的位置（从 0 开始）。 切换标签页 gt or :tabnext 缩写 :tabn 下一个标签页（最后一个会循环到第一个） gT or :tabprevious 缩写 :tabp 上一个标签页（第一个会循环到最后一个） :tabrewind 缩写 :tabr or :tabfirst 缩写 :tabfir 到第一个 :tablast 缩写 :tabl 到最后一个标签页 关闭标签页 :tabclose 缩写 :tabc 关闭当前标签页 :-tabc 关闭上一个标签页 :+tabc 关闭下一个标签页 :tabonly 缩写 :tabo 关闭其他标签页 下一章将介绍块操作。 "},"4_常见工具/vim的使用/6.块操作.html":{"url":"4_常见工具/vim的使用/6.块操作.html","title":"块操作","keywords":"","body":"块操作 我们经常会遇到这种情况：某处有一个多行文本，我们要把他复制到代码中用来初始化一个数组。 大部分 时候我们会这么做： 写好数组声明； 把内容复制到中括号内（大概长成下面那段文本的样子） 然后行首加 ' 行尾加 ',，重复直到最后一行（想象一下这段文本有50行） 有了 Vim 块操作就不用这么麻烦了，按 014gg，然后跟着选中那一行的指示操作。 var myArray = [ Ctrl-v 进入块操作，$ 到行尾，j 到下一行（做！）。 按 j 到下一行 下面还好多行，干脆来个 4j 多跳几行 https://www.yahaha.net https://www.yahaha.net 以后看好行号再跳！现在按 A 插入，然后输入 完成第一步。 // Oops... 跳多了，没事，按 k 回到上一行 ]; 现在已经完成了第一步，还需要补前面的 '，按 14gg 回到那一行，再操作一次，但是这次有三个 地方要变化一下： 第一行按 $ 时改按 0，因为这次要在行首插入； 末行按 A 时改按 I，块操作中 A 是字符后插入， I 是字符前插入； 最后按 。 最后再做些收尾工作，19gg$x 删掉最后一行结尾处的 ,，然后 14gg7== 把代码缩进一下。 Done! 注意：选择行首行尾的操作也可以在选择完要处理的内容之后执行，即 Ctrl-v jjj$A', 接下来我们说说 Vim 中的宏。 "},"4_常见工具/vim的使用/7.vim宏.html":{"url":"4_常见工具/vim的使用/7.vim宏.html","title":"Vim 中的宏","keywords":"","body":"Vim 中的宏 宏操作在 Vim 中（甚至任何编辑器中）属于比较复杂的操作了，如果前面的内容都已经掌握了，那么你 已经可以算是一个 Vim 高手了，所以，这位高手，我们不妨再来进阶一下吧。 还记得上一章中把文本转成数组的例子吧，我们还做同样的事，不过这次是用宏来操作。 12gg 跳转到准备开始处理的起始行，按指示进行操作，先看效果后解释。 var myArray = [ 按 qa 开启宏录制，前方高能，连续按 IAjq7@a 我也要 我也要 我也要 我也要 我也要 我也要 我也要 ]; OMG! 发生了什么，有没有惊出一身冷汗，之前两次块操作的结果瞬间就完成了，最后再简单做些收尾工作， 去掉最后一行的逗号，集体缩进一下，搞定！ 下面来解释一下刚才的操作： q 是开启录制宏，a 是给这次宏的录制过程一个存储位置，可以是 0-9 或 a-z； 然后 IAj 是你这次录制的整个宏的操作过程，意思就是行首 插入单引号，行尾插入单引号和逗号，跳到下一行； 接下来的 q 是结束本次宏的录制； @ 是唤起宏，a 是要唤起的宏的名字（存储位置），前面的 7 你应该明白吧，就是执行 7 次。 Tips：@@ 再次唤起最后一次执行的宏。 日常工作中频繁用到的和不怎么用得上的在这七章中应该都已经涉及到了，如果 Vim 中遇到了什么问题， 或者教程中遗漏了什么常规操作，欢迎在 issues 中提出来，我会尽我所能给予回答 或完善到教程中。 再次感谢您的关注！如果爱，请分享。爱极客公园，爱 VIM！ "},"5_外语学习/雅思/听力.html":{"url":"5_外语学习/雅思/听力.html","title":"听力","keywords":"","body":"听力 "},"6_课程学习/0_cs520知识图谱/0_课程介绍.html":{"url":"6_课程学习/0_cs520知识图谱/0_课程介绍.html","title":"课程介绍","keywords":"","body":"课程介绍 Standford CS520知识图谱 What is a knowledge graph? How to create a knowledge graph? What are some advanced knowledge graphs? What are some knowledge graph inference algorithms? How to evolve a knowledge graph? How do users interact with knowledge graphs? What are some prelevant graph engines in industry? What is the role of knowledge graphs in machine learning? What are some high value use cases of knowledge graphs? What are some open research questions on knowledge graphs "},"6_课程学习/0_cs520知识图谱/1_什么是知识图谱.html":{"url":"6_课程学习/0_cs520知识图谱/1_什么是知识图谱.html","title":"什么是知识图谱","keywords":"","body":"什么是知识图谱 "},"6_课程学习/1_cs224n自然语言处理/1_什么是知识图谱.html":{"url":"6_课程学习/1_cs224n自然语言处理/1_什么是知识图谱.html","title":"什么是知识图谱","keywords":"","body":"什么是知识图谱 "}}