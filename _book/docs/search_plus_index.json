{"./":{"url":"./","title":"Introduction","keywords":"","body":" 关于作者 关于作者 大家好，我是卷发擦边，欢迎来到我的博客！ "},"data_structure&algorithm/data_structure&algorithm.html":{"url":"data_structure&algorithm/data_structure&algorithm.html","title":"data_structure&algorithm.md","keywords":"","body":"以下是本节的内容 "},"deeplearning/CV/CV.html":{"url":"deeplearning/CV/CV.html","title":"CV.md","keywords":"","body":"以下是本节的内容 "},"deeplearning/ML/ML.html":{"url":"deeplearning/ML/ML.html","title":"ML.md","keywords":"","body":"以下是本节的内容 "},"deeplearning/NLP/NLP.html":{"url":"deeplearning/NLP/NLP.html","title":"NLP.md","keywords":"","body":"以下是本节的内容 "},"deeplearning/deeplearning.html":{"url":"deeplearning/deeplearning.html","title":"deeplearning.md","keywords":"","body":"以下是本节的内容 "},"program_language/program_language.html":{"url":"program_language/program_language.html","title":"program_language.md","keywords":"","body":"以下是本节的内容 "},"program_language/python/python.html":{"url":"program_language/python/python.html","title":"python语言的学习","keywords":"","body":" python语言的学习 python语言的学习 "},"tools/gitbook的使用/1.本地的安装与构建.html":{"url":"tools/gitbook的使用/1.本地的安装与构建.html","title":"安装","keywords":"","body":" 本地的安装与构建 安装 基本使用 gitbook init gitbook serve 感谢大佬@ [chengweiyang](http://www.chengweiyang.cn/gitbook/index.html)的分享 本地的安装与构建 安装 gitbook 的安装非常简单，详细指南可以参考 gitbook 文档。 这里的安装只需要一步就能完成！ $ npm install gitbook-cli -g 需要注意的是：用户首先需要安装 nodejs，以便能够使用 npm 来安装 gitbook。 基本使用 gitbook 的基本用法非常简单，基本上就只有两步： 使用 gitbook init 初始化书籍目录 使用 gitbook serve 编译书籍 下面将结合一个非常简单的实例，来介绍 gitbook 的基本用法。 gitbook init 首先，创建如下目录结构： $ tree book/ book/ ├── README.md └── SUMMARY.md 0 directories, 2 files README.md 和 SUMMARY.md 是两个必须文件，README.md 是对书籍的简单介绍： $ cat book/README.md # README This is a book powered by [GitBook](https://github.com/GitbookIO/gitbook). SUMMARY.md 是书籍的目录结构。内容如下： $ cat book/SUMMARY.md # SUMMARY * [Chapter1](chapter1/README.md) * [Section1.1](chapter1/section1.1.md) * [Section1.2](chapter1/section1.2.md) * [Chapter2](chapter2/README.md) 创建了这两个文件后，使用 gitbook init，它会为我们创建 SUMMARY.md 中的目录结构。 $ cd book $ gitbook init $ tree . ├── README.md ├── SUMMARY.md ├── chapter1 │ ├── README.md │ ├── section1.1.md │ └── section1.2.md └── chapter2 └── README.md 2 directories, 6 files 注意：在我的实验中，gitbook init 只支持两级目录！ gitbook serve 书籍目录结构创建完成以后，就可以使用 gitbook serve 来编译和预览书籍了： $ gitbook serve Press CTRL+C to quit ... Live reload server started on port: 35729 Starting build ... Successfully built! Starting server ... Serving book on http://localhost:4000 gitbook serve 命令实际上会首先调用 gitbook build 编译书籍，完成以后会打开一个 web 服务器，监听在本地的 4000 端口。 现在，可以用浏览器打开 http://127.0.0.1:4000 查看书籍的效果 "},"tools/gitbook的使用/2.发布至github.html":{"url":"tools/gitbook的使用/2.发布至github.html","title":"发布到 GitHub Pages","keywords":"","body":" 构建书籍 创建 gh-pages 分支 上传书籍内容到 GitHub 发布到 GitHub Pages 除了能够将书籍发布到 GitBook.com 外，还可以将书籍发布到 GitHub Pages，由于没有找到官方文档，所以这里记录的是我自己正在使用的一种方法。 如果读者不了解 GitHub Pages 为何物，简单说就是一个可以托管静态网站的 Git 项目，支持使用 markdown 语法以及 Jekyll 来构建，或者直接使用已经生成好的静态站点。详细可以参考 GitHub Pages 主页。 由于 gitbook 书籍可以通过 gitbook 本地构建出 site 格式，所以可以直接将构建好的书籍直接放到 GitHub Pages 中托管，之后，可以通过如下地址访问书籍： .github.io/ 例如：这本书中使用的例子 'test' 项目可以通过地址：chengweiv5.github.io/test 来访问。 当访问 chengweiv5.github.io/test 时，会访问 chengweiv5/test 项目的 gh-pages 分支的内容，所以需要为项目创建一个 gh-pages 分支，并且将静态站点内容放入其中。也就是说，test 项目将有如下两个分支： master, 保存书籍的源码 gh-pages, 保存书籍编译后的 HTML 文件 构建书籍 首先，使用 gitbook build 将书籍内容输出到默认目录，也就是当前目录下的 _book 目录。 $ gitbook build Starting build ... Successfully built! $ ls _book GLOSSARY.html chapter1 chapter2 gitbook glossary_index.json index.html search_index.json 创建 gh-pages 分支 执行如下命令来创建分支，并且删除不需要的文件： $ git checkout --orphan gh-pages $ git rm --cached -r . $ git clean -df $ rm -rf *~ 现在，目录下应该只剩下 _book 目录了，首先，忽略一些文件： $ echo \"*~\" > .gitignore $ echo \"_book\" >> .gitignore $ git add .gitignore $ git commit -m \"Ignore some files\" 然后，加入 _book 下的内容到分支中： $ cp -r _book/* . $ git add . $ git commit -m \"Publish book\" 上传书籍内容到 GitHub 现在，可以将编译好的书籍内容上传到 GitHub 中 test 项目的 gh-pages 分支了，虽然这里还没有创建分支，上传和创建会一步完成！ $ git push -u origin gh-pages Counting objects: 49, done. Delta compression using up to 4 threads. Compressing objects: 100% (45/45), done. Writing objects: 100% (49/49), 1.34 MiB | 131.00 KiB/s, done. Total 49 (delta 5), reused 0 (delta 0) To https://github.com/chengweiv5/test.git * [new branch] gh-pages -> gh-pages Branch gh-pages set up to track remote branch gh-pages from github. "},"tools/git的使用/1. 版本的创建与退回.html":{"url":"tools/git的使用/1. 版本的创建与退回.html","title":"创建版本库","keywords":"","body":" 创建版本库 文件版本的退回 丢弃工作区 丢弃暂存区 撤销提交版本 小结 感谢大佬@ [liaoxuefeng](https://www.liaoxuefeng.com/)的分享 创建版本库 通过git init命令把目录变成Git可以管理的仓库 $ git init 文件版本的退回 丢弃工作区 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态； 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。 总之，就是让这个文件回到最近一次git commit或git add时的状态 git checkout -- readme.txt 丢弃暂存区 第一步用命令git reset HEAD ，就回到了上述丢弃工作区场景 第二步按之前操作git checkout -- 撤销提交版本 使用git log命令查看历史记录,你看到的一大串类似1094adb...的是commit id（版本号）git log 准备把readme.txt回退到上一个版本，也就是my first commit的那个版本,首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。 现在，我们要把当前版本回退到上一个版本，就可以使用git reset命令：git reset --hard HEAD^ 如果想撤销回退，该怎么办呢？只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个commit id是1094adb...，于是就可以指定回到未来的某个版本：git reset --hard 1094a Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向想要恢复的版本，git会记录每次提交，使用git reflog用来记录你的每一次命令：git reflog 小结 git add .将工作区修改添加至暂存区，git commit -m \"comment\"把暂存区的所有内容提交到当前分支 git checkout -- readme.txt这个文件回到最近一次git commit或git add时的状态 git reset HEAD 丢弃暂存区 git reset --hard HEAD^或者git reset --hard 1094a回到之前版本,版本号可以通过git log查看 git reflog查看命令历史要重返未来，以便确定要回到未来的哪个版本。 "},"tools/git的使用/2. 分支的管理.html":{"url":"tools/git的使用/2. 分支的管理.html","title":"分支的管理","keywords":"","body":" 分支的创建与合并 冲突的解决 小结 分支的管理 分支的创建与合并 git使用指针HEAD指向工作的分支，一般主分支为master,而master指向每次的commit,所以每次提交，master都会往前走一步，当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上： 创建dev分支，然后切换到dev分支： git checkout -b dev 如果只是切换分支，只需要git checkout dev就可以了。 然后，用git branch命令查看当前分支： git branch命令会列出所有分支，当前分支前面会标一个*号。 现在，我们把dev分支的工作成果合并到master分支上： git checkout master git merge dev git merge命令用于合并指定分支到当前分支 之后就可以删除dev分支git branch -d dev 冲突的解决 如果master分支和dev分支各自都分别有新的提交，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突 $ git status On branch master Your branch is ahead of 'origin/master' by 2 commits. (use \"git push\" to publish your local commits) You have unmerged paths. (fix conflicts and run \"git commit\") (use \"git merge --abort\" to abort the merge) Unmerged paths: (use \"git add ...\" to mark resolution) both modified: readme.txt no changes added to commit (use \"git add\" and/or \"git commit -a\") 我们可以直接查看readme.txt的内容： Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage. Git tracks changes of files. >>>>>> feature1 Git用，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存再提交： 小结 查看分支：git branch 创建分支：git branch 切换分支：git checkout 或者git switch 创建+切换分支：git checkout -b 或者git switch -c 合并某分支到当前分支：git merge 删除分支：git branch -d 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。 用git log --graph命令可以看到分支合并图。 "},"tools/git的使用/3. 远程仓库的管理.html":{"url":"tools/git的使用/3. 远程仓库的管理.html","title":"远程仓库的管理","keywords":"","body":" 添加远程仓库 本地同步远程 克隆远程库 远程仓库的管理 添加远程仓库 git remote add origin git@xxxxx.git 本地同步远程 把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。 git push origin master 克隆远程库 用命令git clone克隆一个本地库： $ git clone git@xxxx.git "},"tools/markdown的使用/Markdown的语法.html":{"url":"tools/markdown的使用/Markdown的语法.html","title":"标题","keywords":"","body":" 标题 段落 区块引用 代码区块 强调 列表 分割线 链接 图片 [反斜杠](#反斜杠) 符号'`' 其它： Markdown的语法 Markdown语法主要分为如下几大部分： 标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \\，符号'`'。 标题 两种形式：1）使用=和-标记一级和二级标题。 一级标题=========二级标题--------- 效果： 一级标题 二级标题 2）使用#，可表示1-6级标题。 ### 三级标题#### 四级标题##### 五级标题###### 六级标题 效果： 三级标题 四级标题 五级标题 六级标题 段落 段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。 区块引用 在段落的每行或者只在第一行使用符号>,还可使用多个嵌套引用，如： > 区块引用>> 嵌套引用 效果： 区块引用 嵌套引用 代码区块 代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如普通段落： void main() { printf(\"Hello, Markdown.\"); } 代码区块： void main() { printf(\"Hello, Markdown.\"); } 注意:需要和普通段落之间存在空行。 强调 在强调内容两侧分别加上*或者_，如： *斜体*，_斜体_**粗体**，__粗体__ 效果： 斜体，斜体粗体，粗体 列表 使用·、+、或-标记无序列表，如： -（+*） 第一项 -（+*） 第二项 - （+*）第三项 注意：标记后面最少有一个空格或制表符。若不在引用区块中，必须和前方段落之间存在空行。 效果： 第一项 第二项 第三项 有序列表的标记方式是将上述的符号换成数字,并辅以.，如： 1 . 第一项2 . 第二项3 . 第三项 效果： 第一项 第二项 第三项 分割线 分割线最常使用就是三个或以上*，还可以使用-和_。 链接 链接可以由两种形式生成：行内式和参考式。行内式： [younghz的Markdown库](https:baidu.com\")。 效果： younghz的Markdown库。 参考式： [younghz的Markdown库1][1][younghz的Markdown库2][2][1]:https:baidu.com \"Markdown\"[2]:https:baidu.com \"Markdown\" 效果： younghz的Markdown库1younghz的Markdown库2 注意：上述的[1]:https:://github.com/younghz/Markdown \"Markdown\"不出现在区块中。 图片 添加图片的形式和链接相似，只需在链接的基础上前方加一个！。 反斜杠\\ 相当于反转义作用。使符号成为普通符号。 符号'`' 起到标记作用。如： `ctrl+a` 效果： ctrl+a 其它： 列表的使用(非traditonal markdown)： 用|表示表格纵向边界，表头和表内容用-隔开，并可用:进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。 代码库 链接 MarkDown https://github.com/younghz/Markdown MarkDownCopy https://github.com/younghz/Markdown 关于其它扩展语法可参见具体工具的使用说明。 "}}