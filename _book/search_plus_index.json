{"./":{"url":"./","title":"Introduction","keywords":"","body":" 关于作者 关于作者 大家好，我是卷发擦边，欢迎来到我的博客！ "},"data_structure&algorithm/data_structure&algorithm.html":{"url":"data_structure&algorithm/data_structure&algorithm.html","title":"data_structure&algorithm.md","keywords":"","body":"以下是本节的内容 "},"deeplearning/CV/CV.html":{"url":"deeplearning/CV/CV.html","title":"CV.md","keywords":"","body":"以下是本节的内容 "},"deeplearning/ML/ML.html":{"url":"deeplearning/ML/ML.html","title":"ML.md","keywords":"","body":"以下是本节的内容 "},"deeplearning/NLP/NLP.html":{"url":"deeplearning/NLP/NLP.html","title":"NLP.md","keywords":"","body":"以下是本节的内容 "},"deeplearning/deeplearning.html":{"url":"deeplearning/deeplearning.html","title":"deeplearning.md","keywords":"","body":"以下是本节的内容 "},"program_language/program_language.html":{"url":"program_language/program_language.html","title":"program_language.md","keywords":"","body":"以下是本节的内容 "},"program_language/python/python.html":{"url":"program_language/python/python.html","title":"python语言的学习","keywords":"","body":" python语言的学习 python语言的学习 "},"tools/gitbook的使用/1.本地的安装与构建.html":{"url":"tools/gitbook的使用/1.本地的安装与构建.html","title":"本地的安装与构建","keywords":"","body":" 本地的安装与构建 安装 基本使用 gitbook init gitbook serve 感谢大佬@ [chengweiyang](http://www.chengweiyang.cn/gitbook/index.html)的分享 本地的安装与构建 安装 gitbook 的安装非常简单，详细指南可以参考 gitbook 文档。 这里的安装只需要一步就能完成！ $ npm install gitbook-cli -g 需要注意的是：用户首先需要安装 nodejs，以便能够使用 npm 来安装 gitbook。 基本使用 gitbook 的基本用法非常简单，基本上就只有两步： 使用 gitbook init 初始化书籍目录 使用 gitbook serve 编译书籍 下面将结合一个非常简单的实例，来介绍 gitbook 的基本用法。 gitbook init 首先，创建如下目录结构： $ tree book/ book/ ├── README.md └── SUMMARY.md 0 directories, 2 files README.md 和 SUMMARY.md 是两个必须文件，README.md 是对书籍的简单介绍： $ cat book/README.md # README This is a book powered by [GitBook](https://github.com/GitbookIO/gitbook). SUMMARY.md 是书籍的目录结构。内容如下： $ cat book/SUMMARY.md # SUMMARY * [Chapter1](chapter1/README.md) * [Section1.1](chapter1/section1.1.md) * [Section1.2](chapter1/section1.2.md) * [Chapter2](chapter2/README.md) 创建了这两个文件后，使用 gitbook init，它会为我们创建 SUMMARY.md 中的目录结构。 $ cd book $ gitbook init $ tree . ├── README.md ├── SUMMARY.md ├── chapter1 │ ├── README.md │ ├── section1.1.md │ └── section1.2.md └── chapter2 └── README.md 2 directories, 6 files 注意：在我的实验中，gitbook init 只支持两级目录！ gitbook serve 书籍目录结构创建完成以后，就可以使用 gitbook serve 来编译和预览书籍了： $ gitbook serve Press CTRL+C to quit ... Live reload server started on port: 35729 Starting build ... Successfully built! Starting server ... Serving book on http://localhost:4000 gitbook serve 命令实际上会首先调用 gitbook build 编译书籍，完成以后会打开一个 web 服务器，监听在本地的 4000 端口。 现在，可以用浏览器打开 http://127.0.0.1:4000 查看书籍的效果 "},"tools/gitbook的使用/2.发布至github.html":{"url":"tools/gitbook的使用/2.发布至github.html","title":"发布到 GitHub Pages","keywords":"","body":" 构建书籍 创建 gh-pages 分支 上传书籍内容到 GitHub 发布到 GitHub Pages 除了能够将书籍发布到 GitBook.com 外，还可以将书籍发布到 GitHub Pages，由于没有找到官方文档，所以这里记录的是我自己正在使用的一种方法。 如果读者不了解 GitHub Pages 为何物，简单说就是一个可以托管静态网站的 Git 项目，支持使用 markdown 语法以及 Jekyll 来构建，或者直接使用已经生成好的静态站点。详细可以参考 GitHub Pages 主页。 由于 gitbook 书籍可以通过 gitbook 本地构建出 site 格式，所以可以直接将构建好的书籍直接放到 GitHub Pages 中托管，之后，可以通过如下地址访问书籍： .github.io/ 例如：这本书中使用的例子 'test' 项目可以通过地址：chengweiv5.github.io/test 来访问。 当访问 chengweiv5.github.io/test 时，会访问 chengweiv5/test 项目的 gh-pages 分支的内容，所以需要为项目创建一个 gh-pages 分支，并且将静态站点内容放入其中。也就是说，test 项目将有如下两个分支： master, 保存书籍的源码 gh-pages, 保存书籍编译后的 HTML 文件 构建书籍 首先，使用 gitbook build 将书籍内容输出到默认目录，也就是当前目录下的 _book 目录。 $ gitbook build Starting build ... Successfully built! $ ls _book GLOSSARY.html chapter1 chapter2 gitbook glossary_index.json index.html search_index.json 创建 gh-pages 分支 执行如下命令来创建分支，并且删除不需要的文件： $ git checkout --orphan gh-pages $ git rm --cached -r . $ git clean -df $ rm -rf *~ 现在，目录下应该只剩下 _book 目录了，首先，忽略一些文件： $ echo \"*~\" > .gitignore $ echo \"_book\" >> .gitignore $ git add .gitignore $ git commit -m \"Ignore some files\" 然后，加入 _book 下的内容到分支中： $ cp -r _book/* . $ git add . $ git commit -m \"Publish book\" 上传书籍内容到 GitHub 现在，可以将编译好的书籍内容上传到 GitHub 中 test 项目的 gh-pages 分支了，虽然这里还没有创建分支，上传和创建会一步完成！ $ git push -u origin gh-pages Counting objects: 49, done. Delta compression using up to 4 threads. Compressing objects: 100% (45/45), done. Writing objects: 100% (49/49), 1.34 MiB | 131.00 KiB/s, done. Total 49 (delta 5), reused 0 (delta 0) To https://github.com/chengweiv5/test.git * [new branch] gh-pages -> gh-pages Branch gh-pages set up to track remote branch gh-pages from github. "},"tools/git的使用/1. 版本的创建与退回.html":{"url":"tools/git的使用/1. 版本的创建与退回.html","title":"创建版本库","keywords":"","body":" 创建版本库 文件版本的退回 丢弃工作区 丢弃暂存区 撤销提交版本 小结 感谢大佬@ [liaoxuefeng](https://www.liaoxuefeng.com/)的分享 创建版本库 通过git init命令把目录变成Git可以管理的仓库 $ git init 文件版本的退回 丢弃工作区 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态； 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。 总之，就是让这个文件回到最近一次git commit或git add时的状态 git checkout -- readme.txt 丢弃暂存区 第一步用命令git reset HEAD ，就回到了上述丢弃工作区场景 第二步按之前操作git checkout -- 撤销提交版本 使用git log命令查看历史记录,你看到的一大串类似1094adb...的是commit id（版本号）git log 准备把readme.txt回退到上一个版本，也就是my first commit的那个版本,首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。 现在，我们要把当前版本回退到上一个版本，就可以使用git reset命令：git reset --hard HEAD^ 如果想撤销回退，该怎么办呢？只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个commit id是1094adb...，于是就可以指定回到未来的某个版本：git reset --hard 1094a Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向想要恢复的版本，git会记录每次提交，使用git reflog用来记录你的每一次命令：git reflog 小结 git add .将工作区修改添加至暂存区，git commit -m \"comment\"把暂存区的所有内容提交到当前分支 git checkout -- readme.txt这个文件回到最近一次git commit或git add时的状态 git reset HEAD 丢弃暂存区 git reset --hard HEAD^或者git reset --hard 1094a回到之前版本,版本号可以通过git log查看 git reflog查看命令历史要重返未来，以便确定要回到未来的哪个版本。 "},"tools/git的使用/2. 分支的管理.html":{"url":"tools/git的使用/2. 分支的管理.html","title":"分支的管理","keywords":"","body":" 分支的创建与合并 冲突的解决 小结 分支的管理 分支的创建与合并 git使用指针HEAD指向工作的分支，一般主分支为master,而master指向每次的commit,所以每次提交，master都会往前走一步，当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上： 创建dev分支，然后切换到dev分支： git checkout -b dev 如果只是切换分支，只需要git checkout dev就可以了。 然后，用git branch命令查看当前分支： git branch命令会列出所有分支，当前分支前面会标一个*号。 现在，我们把dev分支的工作成果合并到master分支上： git checkout master git merge dev git merge命令用于合并指定分支到当前分支 之后就可以删除dev分支git branch -d dev 冲突的解决 如果master分支和dev分支各自都分别有新的提交，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突 $ git status On branch master Your branch is ahead of 'origin/master' by 2 commits. (use \"git push\" to publish your local commits) You have unmerged paths. (fix conflicts and run \"git commit\") (use \"git merge --abort\" to abort the merge) Unmerged paths: (use \"git add ...\" to mark resolution) both modified: readme.txt no changes added to commit (use \"git add\" and/or \"git commit -a\") 我们可以直接查看readme.txt的内容： Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage. Git tracks changes of files. >>>>>> feature1 Git用，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存再提交： 小结 查看分支：git branch 创建分支：git branch 切换分支：git checkout 或者git switch 创建+切换分支：git checkout -b 或者git switch -c 合并某分支到当前分支：git merge 删除分支：git branch -d 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。 用git log --graph命令可以看到分支合并图。 "},"tools/git的使用/3. 远程仓库的管理.html":{"url":"tools/git的使用/3. 远程仓库的管理.html","title":"远程仓库的管理","keywords":"","body":" 添加远程仓库 本地同步远程 克隆远程库 远程仓库的管理 添加远程仓库 git remote add origin git@xxxxx.git 本地同步远程 把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。 git push origin master 克隆远程库 用命令git clone克隆一个本地库： $ git clone git@xxxx.git "},"tools/markdown的使用/Markdown的语法.html":{"url":"tools/markdown的使用/Markdown的语法.html","title":"Markdown的语法","keywords":"","body":" 标题 段落 区块引用 代码区块 强调 列表 分割线 链接 图片 [反斜杠](#反斜杠) 符号'`' 其它： Markdown的语法 Markdown语法主要分为如下几大部分： 标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \\，符号'`'。 标题 两种形式：1）使用=和-标记一级和二级标题。 一级标题=========二级标题--------- 效果： 一级标题 二级标题 2）使用#，可表示1-6级标题。 ### 三级标题#### 四级标题##### 五级标题###### 六级标题 效果： 三级标题 四级标题 五级标题 六级标题 段落 段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。 区块引用 在段落的每行或者只在第一行使用符号>,还可使用多个嵌套引用，如： > 区块引用>> 嵌套引用 效果： 区块引用 嵌套引用 代码区块 代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如普通段落： void main() { printf(\"Hello, Markdown.\"); } 代码区块： void main() { printf(\"Hello, Markdown.\"); } 注意:需要和普通段落之间存在空行。 强调 在强调内容两侧分别加上*或者_，如： *斜体*，_斜体_**粗体**，__粗体__ 效果： 斜体，斜体粗体，粗体 列表 使用·、+、或-标记无序列表，如： -（+*） 第一项 -（+*） 第二项 - （+*）第三项 注意：标记后面最少有一个空格或制表符。若不在引用区块中，必须和前方段落之间存在空行。 效果： 第一项 第二项 第三项 有序列表的标记方式是将上述的符号换成数字,并辅以.，如： 1 . 第一项2 . 第二项3 . 第三项 效果： 第一项 第二项 第三项 分割线 分割线最常使用就是三个或以上*，还可以使用-和_。 链接 链接可以由两种形式生成：行内式和参考式。行内式： [younghz的Markdown库](https:baidu.com\")。 效果： younghz的Markdown库。 参考式： [younghz的Markdown库1][1][younghz的Markdown库2][2][1]:https:baidu.com \"Markdown\"[2]:https:baidu.com \"Markdown\" 效果： younghz的Markdown库1younghz的Markdown库2 注意：上述的[1]:https:://github.com/younghz/Markdown \"Markdown\"不出现在区块中。 图片 添加图片的形式和链接相似，只需在链接的基础上前方加一个！。 反斜杠\\ 相当于反转义作用。使符号成为普通符号。 符号'`' 起到标记作用。如： `ctrl+a` 效果： ctrl+a 其它： 列表的使用(非traditonal markdown)： 用|表示表格纵向边界，表头和表内容用-隔开，并可用:进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。 代码库 链接 MarkDown https://github.com/younghz/Markdown MarkDownCopy https://github.com/younghz/Markdown 关于其它扩展语法可参见具体工具的使用说明。 "},"tools/vim的使用/1.光标的移动.html":{"url":"tools/vim的使用/1.光标的移动.html","title":"光标的移动","keywords":"","body":" 光标的移动 移动光标 单位级 单词级 块级 感谢大佬@ [dofy](https://dofy.gitbook.io/learn-vim/)的分享 光标的移动 欢迎进入第一章，这一章将学习简单的光标移动操作。 如果你已经有了一定基础，这部分可以略过，直接 G 到文档尾部按照操作进入下一章。 移动光标 单位级 h 向左一字符 j 下一行 k 上一行 l 向右一字符 单词级 w or W 向右移动到下一单词开头 e or E 向右移动到单词结尾 b or B 向左移动到单词开头 注意：所有小写单词都是以分词符作为单词界限，大写字母以空格作为界限 在下面字符块中感受一下各种移动吧！ This project's GitHub url is https://github.com/dofy/learn-vim Please clone it to your local folder and open the first file which is named file-one.md via following command \"vim file-one.md\" and welcome to https://yahaha.net :) 块级 gg 到文档第一行 G 到文档最后一行 0 到行首（第 1 列） ^ 到第一个非空白字符 $ 到行尾 H 移动到屏幕顶端 M 移动到屏幕中间 L 移动到屏幕底部 Ctrl-d 向下移动半页 Ctrl-u 向上移动半页 Ctrl-f 向下移动一页 Ctrl-b 向上移动一页 : or gg 跳转到第 N 行 :+ or j 向下跳 N 行 :- or k 向上跳 N 行 注意：所有命令前都可以加一个数字 N，表示对后面的命令执行 N 次，例如你想向下移动 3 行，除了 可以用 :+3 之外，还可以用 3j 来实现同样的效果。另外，上面实际上有两种命令：一种是键入后 立即执行的，比如 gg；还有一种是先输入 : 的（后面还会出现先按 / 的），这类命令需要在 输入完成后按回车执行，后面的教程中也是一样。 现在你可以在当前文件中畅游了，当你熟悉了各种移动操作后就可以通过 G 定位到当前文档到最后 一行，按照提示进入下一章了。 将光标定位到后面文件名的任意位置上，直接敲键盘 gf 进入第二章。 "},"tools/vim的使用/2.打开文件、查找内容.html":{"url":"tools/vim的使用/2.打开文件、查找内容.html","title":"打开文件、查找内容","keywords":"","body":" 打开文件 在 Vim 中打开文件 查找 文档内查找 行内查找 匹配查找 打开文件、查找内容 打开文件 哈，现在你已经在无意间学会了一种在 Vim 中打开文件的方式，虽然这种方式并不是最常用的，但却是最 直接的，尤其是当你的代码中 include 了某文件时，下面介绍另外两种常用的打开方式。 在 Vim 中打开文件 :e 打开名为 filename 的文件，若文件不存在则创建之 :Ex 在 Vim 中打开目录树，光标选中后回车打开对应文件（提示：- 进入上级目录） 查找 文档内查找 * 向后查找光标当前所在单词 # 向前查找光标当前所在单词 / 向后查找指定字符串 ? 向前查找指定字符串 n 继续查找下一个 N 继续查找上一个 注意： n 和 N 是有方向性的，若你之前通过 * 查找，则 n 会继续向文档尾方向查找，N 向文档首方向；反之，若你通过 # 查找，则 n 指向文档首，N 指向文档尾 行内查找 f 当前行内向行尾方向查找并定位到字符 X t 当前行内向行尾方向查找并定位到字符 X 之前 F 当前行内向行首方向查找并定位到字符 X T 当前行内向行首方向查找并定位到字符 X 之后 ; 继续向当前方向查找下一个字符 , 向当前相反方向查找下一个字符 当前文档中有几个 “Vim” 单词，你可以尝试用 * 和 # 进行查找并感受 n 和 N 的方向性。 上面的 “注意” 中有几个字符 \"n\"，你可以在那试试行内查找并感受下 ; 和 , 的方向性。 匹配查找 Vim 中可以使用 % 对 ( 和 )，[ 和 ]，{ 和 } 进行匹配查找，当光标位于其中一个 符号上时，按下 %，光标会跳到与之匹配的另外一个符号上。 在下列文本中的 ()[]{} 字符上按 % 看看效果，连续多按几次。 (function(win, doc) { var n = ((1 + 2) * (3 + 4)) / 7; var a = [1, 2, 3, 4, 5, 6, 7]; var f = function(b) { if(b) { return false; } else { return true; } }; })(window, document); 下一章将介绍文档的修改，在这之前先简单介绍一下 Vim 的 buffer，简单理解 buffer 就是当前 Vim session 的文件历史记录。 现在你的 buffer 中应该已经有两个文件了，你可以用 :buffers 或 :ls 命令查看，看到 buffer 列表了吧，大概是这个样子的： :ls 1 #h \"file-one.md\" line 47 2 %a \"file-two.md\" line 1 Press ENTER or type command to continue 接下来你可以尝试通过以下命令在文件缓存中进行跳转了 :bn 打开缓存中下一个文件 :bp 打开缓存中上一个文件 :b 打开缓存中第 N 个文件 你也可以使用 :bdelete 来删除所要关闭的缓冲区，缩写 :bd。 当然你也可以使用 :Ex 命令，选择 file-three.md 并打开，进入第三章。 "},"tools/vim的使用/3.文档的修改与保存.html":{"url":"tools/vim的使用/3.文档的修改与保存.html","title":"文档的修改与保存","keywords":"","body":" 修改文档 插入 删除（并保存到 Vim 剪贴板） 复制 粘贴 合并 替换 撤销、重做 保存文件 文档的修改与保存 修改文档 你现在已经学会了控制光标、打开文件、切换文件、并在文件中查找内容，这些操作都是在 Vim 的 normal 模式下进行的。现在，是时候进入 Vim 的另外一种模式 —— insert 模式，学习一下如何修改文件了。 插入 i 当前字符前插入 a 当前字符后插入 I 行首插入 A 行尾插入 o 在下一行插入 O 在上一行插入 注意：以上任何一个命令都会使 Vim 进入 insert 模式，进入该模式后光标会发生变化，这时输入的 文字会直接出现在文档中，按 Esc 键或 Ctrl-[ 或 Ctrl-C 退出 insert 模式。 删除（并保存到 Vim 剪贴板） s 删除当前字符，并进入 INSERT 模式 S 删除当前行并保存到 Vim 剪贴板，同时进入 INSERT 模式（等同于 cc） x 删除当前字符，相当于 insert 模式下的 Delete X 删除前一个字符，相当于 insert 模式下的 Backspace dd 删除当前行，并将删除的内容保存到 Vim 剪贴板 d 删除指定内容并保存到 Vim 剪贴板 cc 删除当前行并保存到 Vim 剪贴板，同时进入 INSERT 模式 c 删除指定内容并保存到 Vim 剪贴板，同时进入 INSERT 模式 说明： 部分是对操作内容的描述，如果要删除一个单词，就输入 dw 或者 de，要复制当前 位置到行尾的内容，就输入 y$，要删除后面 3 个字符并插入，就输入 c3l 诸如此类。 复制 yy 复制当前行到 Vim 剪贴板 y 复制指定内容到 Vim 剪贴板 粘贴 p 在当前位置后粘贴 P 在当前位置前粘贴 合并 J 将当前行与下一行合并 尝试在下面的文本中进行复制粘贴练习 删除这一行 粘贴到这一行下面 剪切 ABC 并把它粘贴到 XYZ 前面，使这部分内容看起来像 剪切 并把它粘贴到 ABC XYZ 前面。 替换 r 将当前字符替换为 X gu 将指定的文本转换为小写 gU 将指定的文本转换为大写 :%s/// 查找 search 内容并替换为 replace 内容 尝试修改下列文本的大小写 Change this line to UPPERCASE, THEN TO lowercase. 还有个更好玩的命令 g~，先将光标定位到上面那行文本，执行 0g~$ 看看发生了什么。 撤销、重做 u 撤销 Ctrl-r 重做 保存文件 :w 保存当前文件 :wa 保存全部文件 :wq or ZZ 保存并退出 :q! or ZQ 强制退出，不保存 :saveas 文件另存为 :w 文件另存一份名为 的副本并继续编辑原文件 你可以试着把当前（也许已经改得面目全非的）文件另存一份，然后继续下一章的学习。 "},"tools/vim的使用/4.一些小技巧.html":{"url":"tools/vim的使用/4.一些小技巧.html","title":"一些小技巧","keywords":"","body":" 简单设置 Vim 清除搜索高亮 重复上一次命令 缩进 自动排版 一些小技巧 简单设置 Vim “工欲善其事，必先利其器”。尽管 Vim 非常强大，但默认配置的 Vim 看起来还是比较朴素的，为了适合 我们的开发需求，要对 Vim 进行一些简单的配置。 :set number 显示行号 :set relativenumber 显示相对行号（这个非常重要，慢慢体会） :set hlsearch 搜索结果高亮 :set autoindent 自动缩进 :set smartindent 智能缩进 :set tabstop=4 设置 tab 制表符所占宽度为 4 :set softtabstop=4 设置按 tab 时缩进的宽度为 4 :set shiftwidth=4 设置自动缩进宽度为 4 :set expandtab 缩进时将 tab 制表符转换为空格 :filetype on 开启文件类型检测 :syntax on 开启语法高亮 这里列出的是命令，你可以通过在 Vim 中输入进行设置，但这种方式设置的参数只在本次关闭 Vim 前生效， 如果你退出 Vim 再打开，之前的设置就失效了。 若要永久生效，需要修改 Vim 的一个自动配置文件，一般文件路径是 /home//.vimrc（Linux 系统）或 /Users//.vimrc（Mac OS 系统） 如果没有就新建一个，以 Mac OS 系统为例： 在控制台执行如下命令，每行结尾记得回车 cd ~ vim .vimrc 现在你已经在 Vim 中打开了你的 Vim 专属配置文件，将上面提到的配置复制到你的文件中，记得要删除 每行开头的 : 修改完成执行 :wq 或者 ZZ 保存退出，再次进入 Vim 时，你的这些配置就已经生效了 当然，机智如我也为你准备好了一份 vimrc 样本文件，你可以在控制台执行 cp vimrc.vim ~/.vimrc 直接使用，再次启动 Vim 或在 Vim 中执行 :source ~/.vimrc你的配置就 应该生效了。 [ AD ] 当然你也可以在我维护的另外一个项目 The 7th Vim 中找到一个更为完整的配置方案。 清除搜索高亮 前面提到的配置中，有一项是高亮全部搜索结果 :set hlsearch，其作用是当你执行 / 、?、* 或 # 搜索后高亮所有匹配结果。 如果你已经设置了这个选项，尝试执行 /set 看到效果了吧，搜索结果一目了然，但这有时候也是一种困扰，因为知道搜索结果后高亮就没用了，但高亮 本人并不这样认为，它会一直高亮下去，直到你用 :set nohlsearch 将其关闭。 但这样需要就打开，不需要就关闭也不是个办法，有没有更好的解决方案呢？当然！请看下面的终极答案： 再搜一个不存在的字符串 通常我用来清除搜索高亮的命令是 /lfw，一是因为 lfw 这个组合一般不会出现（不适用于 本文档...），二是这三个字母的组合按起来比较舒服，手指基本不需要怎么移动（你感受一下）。 重复上一次命令 Vim 有一个特殊的命令 .，你可以用它重复执行上一个命令。 按下面的说明进行操作 按 dd 删除本行 按 . 重复删除操作 2. 再删除两行 这行也没了 p 把刚才删掉的粘回来 3. 又多出 6 行 缩进 >> 向右缩进当前行 向左缩进当前行 在这一行上依次按 3>>， 和 看看效果 打酱油行 自动排版 == 自动排版当前行 gg=G 当前文档全文自动排版 == 对从当前行开始的 N 行进行自动排版 =j 对当前行以及向下 N 行进行自动排版 =k 对当前行以及向上 N 行进行自动排版 另外，还可以利用第二章中提到的匹配搜索对代码块进行批量排版，尝试用 gf 命令打开 file-four-demo.js 按照里面的说明进行操作 如果智能缩进设置生效了，执行后会看到如第二章中一样的排版效果。 下一章将介绍分屏和标签页。 "},"tools/vim的使用/5.分屏与标签页.html":{"url":"tools/vim的使用/5.分屏与标签页.html","title":"分屏与标签页","keywords":"","body":" 窗口分屏 分屏方式 窗口跳转 移动分屏 屏幕缩放 标签页 创建标签页 切换标签页 关闭标签页 分屏与标签页 窗口分屏 工作中经常会遇到这种情况，就是需要参照其他文档编辑当前文档（场景：翻译），或者从另外一个文档 copy 代码到当前文档（场景：复制 html 元素类名到 css 文档），这时候就是你最需要分屏的时候。 分屏方式 :split 缩写 :sp or Ctrl-w s 上下分屏 :vsplit 缩写 :vs or Ctrl-w v 左右分屏 :diffsplit 缩写 :diffs diff 模式打开一个分屏，后面可以加上 {filename} 窗口跳转 Ctrl-w w 激活下一个窗口 Ctrl-w j 激活下方窗口 Ctrl-w k 激活上方窗口 Ctrl-w h 激活左侧窗口 Ctrl-w l 激活右侧窗口 移动分屏 Ctrl-w L 移动到最右侧 Ctrl-w H 移动到最左侧 Ctrl-w K 移动到顶部 Ctrl-w J 移动到底部 注意：区分大小写。另外，可以将底部的屏幕移动到右侧，实现上下分屏到左右分屏的转换。 屏幕缩放 Ctrl-w = 平均窗口尺寸 Ctrl-w + 增加高度 Ctrl-w - 缩减高度 Ctrl-w _ 最大高度 Ctrl-w > 增加宽度 Ctrl-w 缩减宽度 Ctrl-w | 最大宽度 实践！实践！实践！ 标签页 第二章中提到过的 buffer 和刚刚讲到的分屏操作都很适合在少量文件之间进行切换， 文件超过 3 个我觉得就不方便了，而标签页则更适合多文件之间的切换。 创建标签页 :tabnew or :tabedit 缩写 :tabe 打开新标签页 Ctrl-w gf 在新标签页中打开当前光标所在位置的文件名 注意：:tabnew 和 :tabedit 后面都可以跟一个 用以在新标签页中 打开指定文件，还可以在 : 后面加一个数字，指出新标签页在列表中的位置（从 0 开始）。 切换标签页 gt or :tabnext 缩写 :tabn 下一个标签页（最后一个会循环到第一个） gT or :tabprevious 缩写 :tabp 上一个标签页（第一个会循环到最后一个） :tabrewind 缩写 :tabr or :tabfirst 缩写 :tabfir 到第一个 :tablast 缩写 :tabl 到最后一个标签页 关闭标签页 :tabclose 缩写 :tabc 关闭当前标签页 :-tabc 关闭上一个标签页 :+tabc 关闭下一个标签页 :tabonly 缩写 :tabo 关闭其他标签页 下一章将介绍块操作。 "},"tools/vim的使用/6.块操作.html":{"url":"tools/vim的使用/6.块操作.html","title":"块操作","keywords":"","body":"块操作 我们经常会遇到这种情况：某处有一个多行文本，我们要把他复制到代码中用来初始化一个数组。 大部分 时候我们会这么做： 写好数组声明； 把内容复制到中括号内（大概长成下面那段文本的样子） 然后行首加 ' 行尾加 ',，重复直到最后一行（想象一下这段文本有50行） 有了 Vim 块操作就不用这么麻烦了，按 014gg，然后跟着选中那一行的指示操作。 var myArray = [ Ctrl-v 进入块操作，$ 到行尾，j 到下一行（做！）。 按 j 到下一行 下面还好多行，干脆来个 4j 多跳几行 https://www.yahaha.net https://www.yahaha.net 以后看好行号再跳！现在按 A 插入，然后输入 完成第一步。 // Oops... 跳多了，没事，按 k 回到上一行 ]; 现在已经完成了第一步，还需要补前面的 '，按 14gg 回到那一行，再操作一次，但是这次有三个 地方要变化一下： 第一行按 $ 时改按 0，因为这次要在行首插入； 末行按 A 时改按 I，块操作中 A 是字符后插入， I 是字符前插入； 最后按 。 最后再做些收尾工作，19gg$x 删掉最后一行结尾处的 ,，然后 14gg7== 把代码缩进一下。 Done! 注意：选择行首行尾的操作也可以在选择完要处理的内容之后执行，即 Ctrl-v jjj$A', 接下来我们说说 Vim 中的宏。 "},"tools/vim的使用/7.vim宏.html":{"url":"tools/vim的使用/7.vim宏.html","title":"Vim 中的宏","keywords":"","body":"Vim 中的宏 宏操作在 Vim 中（甚至任何编辑器中）属于比较复杂的操作了，如果前面的内容都已经掌握了，那么你 已经可以算是一个 Vim 高手了，所以，这位高手，我们不妨再来进阶一下吧。 还记得上一章中把文本转成数组的例子吧，我们还做同样的事，不过这次是用宏来操作。 12gg 跳转到准备开始处理的起始行，按指示进行操作，先看效果后解释。 var myArray = [ 按 qa 开启宏录制，前方高能，连续按 IAjq7@a 我也要 我也要 我也要 我也要 我也要 我也要 我也要 ]; OMG! 发生了什么，有没有惊出一身冷汗，之前两次块操作的结果瞬间就完成了，最后再简单做些收尾工作， 去掉最后一行的逗号，集体缩进一下，搞定！ 下面来解释一下刚才的操作： q 是开启录制宏，a 是给这次宏的录制过程一个存储位置，可以是 0-9 或 a-z； 然后 IAj 是你这次录制的整个宏的操作过程，意思就是行首 插入单引号，行尾插入单引号和逗号，跳到下一行； 接下来的 q 是结束本次宏的录制； @ 是唤起宏，a 是要唤起的宏的名字（存储位置），前面的 7 你应该明白吧，就是执行 7 次。 Tips：@@ 再次唤起最后一次执行的宏。 日常工作中频繁用到的和不怎么用得上的在这七章中应该都已经涉及到了，如果 Vim 中遇到了什么问题， 或者教程中遗漏了什么常规操作，欢迎在 issues 中提出来，我会尽我所能给予回答 或完善到教程中。 再次感谢您的关注！如果爱，请分享。爱极客公园，爱 VIM！ "},"docs/data_structure&algorithm/data_structure&algorithm.html":{"url":"docs/data_structure&algorithm/data_structure&algorithm.html","title":"data_structure&algorithm.md","keywords":"","body":"以下是本节的内容 "},"docs/deeplearning/CV/CV.html":{"url":"docs/deeplearning/CV/CV.html","title":"CV.md","keywords":"","body":"以下是本节的内容 "},"docs/deeplearning/ML/ML.html":{"url":"docs/deeplearning/ML/ML.html","title":"ML.md","keywords":"","body":"以下是本节的内容 "},"docs/deeplearning/NLP/NLP.html":{"url":"docs/deeplearning/NLP/NLP.html","title":"NLP.md","keywords":"","body":"以下是本节的内容 "},"docs/deeplearning/deeplearning.html":{"url":"docs/deeplearning/deeplearning.html","title":"deeplearning.md","keywords":"","body":"以下是本节的内容 "},"docs/program_language/program_language.html":{"url":"docs/program_language/program_language.html","title":"program_language.md","keywords":"","body":"以下是本节的内容 "},"docs/program_language/python/python.html":{"url":"docs/program_language/python/python.html","title":"python语言的学习","keywords":"","body":" python语言的学习 python语言的学习 "},"docs/tools/gitbook的使用/1.本地的安装与构建.html":{"url":"docs/tools/gitbook的使用/1.本地的安装与构建.html","title":"本地的安装与构建","keywords":"","body":" 本地的安装与构建 安装 基本使用 gitbook init gitbook serve 感谢大佬@ [chengweiyang](http://www.chengweiyang.cn/gitbook/index.html)的分享 本地的安装与构建 安装 gitbook 的安装非常简单，详细指南可以参考 gitbook 文档。 这里的安装只需要一步就能完成！ $ npm install gitbook-cli -g 需要注意的是：用户首先需要安装 nodejs，以便能够使用 npm 来安装 gitbook。 基本使用 gitbook 的基本用法非常简单，基本上就只有两步： 使用 gitbook init 初始化书籍目录 使用 gitbook serve 编译书籍 下面将结合一个非常简单的实例，来介绍 gitbook 的基本用法。 gitbook init 首先，创建如下目录结构： $ tree book/ book/ ├── README.md └── SUMMARY.md 0 directories, 2 files README.md 和 SUMMARY.md 是两个必须文件，README.md 是对书籍的简单介绍： $ cat book/README.md # README This is a book powered by [GitBook](https://github.com/GitbookIO/gitbook). SUMMARY.md 是书籍的目录结构。内容如下： $ cat book/SUMMARY.md # SUMMARY * [Chapter1](chapter1/README.md) * [Section1.1](chapter1/section1.1.md) * [Section1.2](chapter1/section1.2.md) * [Chapter2](chapter2/README.md) 创建了这两个文件后，使用 gitbook init，它会为我们创建 SUMMARY.md 中的目录结构。 $ cd book $ gitbook init $ tree . ├── README.md ├── SUMMARY.md ├── chapter1 │ ├── README.md │ ├── section1.1.md │ └── section1.2.md └── chapter2 └── README.md 2 directories, 6 files 注意：在我的实验中，gitbook init 只支持两级目录！ gitbook serve 书籍目录结构创建完成以后，就可以使用 gitbook serve 来编译和预览书籍了： $ gitbook serve Press CTRL+C to quit ... Live reload server started on port: 35729 Starting build ... Successfully built! Starting server ... Serving book on http://localhost:4000 gitbook serve 命令实际上会首先调用 gitbook build 编译书籍，完成以后会打开一个 web 服务器，监听在本地的 4000 端口。 现在，可以用浏览器打开 http://127.0.0.1:4000 查看书籍的效果 "},"docs/tools/gitbook的使用/2.发布至github.html":{"url":"docs/tools/gitbook的使用/2.发布至github.html","title":"发布到 GitHub Pages","keywords":"","body":" 构建书籍 创建 gh-pages 分支 上传书籍内容到 GitHub 发布到 GitHub Pages 除了能够将书籍发布到 GitBook.com 外，还可以将书籍发布到 GitHub Pages，由于没有找到官方文档，所以这里记录的是我自己正在使用的一种方法。 如果读者不了解 GitHub Pages 为何物，简单说就是一个可以托管静态网站的 Git 项目，支持使用 markdown 语法以及 Jekyll 来构建，或者直接使用已经生成好的静态站点。详细可以参考 GitHub Pages 主页。 由于 gitbook 书籍可以通过 gitbook 本地构建出 site 格式，所以可以直接将构建好的书籍直接放到 GitHub Pages 中托管，之后，可以通过如下地址访问书籍： .github.io/ 例如：这本书中使用的例子 'test' 项目可以通过地址：chengweiv5.github.io/test 来访问。 当访问 chengweiv5.github.io/test 时，会访问 chengweiv5/test 项目的 gh-pages 分支的内容，所以需要为项目创建一个 gh-pages 分支，并且将静态站点内容放入其中。也就是说，test 项目将有如下两个分支： master, 保存书籍的源码 gh-pages, 保存书籍编译后的 HTML 文件 构建书籍 首先，使用 gitbook build 将书籍内容输出到默认目录，也就是当前目录下的 _book 目录。 $ gitbook build Starting build ... Successfully built! $ ls _book GLOSSARY.html chapter1 chapter2 gitbook glossary_index.json index.html search_index.json 创建 gh-pages 分支 执行如下命令来创建分支，并且删除不需要的文件： $ git checkout --orphan gh-pages $ git rm --cached -r . $ git clean -df $ rm -rf *~ 现在，目录下应该只剩下 _book 目录了，首先，忽略一些文件： $ echo \"*~\" > .gitignore $ echo \"_book\" >> .gitignore $ git add .gitignore $ git commit -m \"Ignore some files\" 然后，加入 _book 下的内容到分支中： $ cp -r _book/* . $ git add . $ git commit -m \"Publish book\" 上传书籍内容到 GitHub 现在，可以将编译好的书籍内容上传到 GitHub 中 test 项目的 gh-pages 分支了，虽然这里还没有创建分支，上传和创建会一步完成！ $ git push -u origin gh-pages Counting objects: 49, done. Delta compression using up to 4 threads. Compressing objects: 100% (45/45), done. Writing objects: 100% (49/49), 1.34 MiB | 131.00 KiB/s, done. Total 49 (delta 5), reused 0 (delta 0) To https://github.com/chengweiv5/test.git * [new branch] gh-pages -> gh-pages Branch gh-pages set up to track remote branch gh-pages from github. "},"docs/tools/git的使用/1. 版本的创建与退回.html":{"url":"docs/tools/git的使用/1. 版本的创建与退回.html","title":"创建版本库","keywords":"","body":" 创建版本库 文件版本的退回 丢弃工作区 丢弃暂存区 撤销提交版本 小结 感谢大佬@ [liaoxuefeng](https://www.liaoxuefeng.com/)的分享 创建版本库 通过git init命令把目录变成Git可以管理的仓库 $ git init 文件版本的退回 丢弃工作区 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态； 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。 总之，就是让这个文件回到最近一次git commit或git add时的状态 git checkout -- readme.txt 丢弃暂存区 第一步用命令git reset HEAD ，就回到了上述丢弃工作区场景 第二步按之前操作git checkout -- 撤销提交版本 使用git log命令查看历史记录,你看到的一大串类似1094adb...的是commit id（版本号）git log 准备把readme.txt回退到上一个版本，也就是my first commit的那个版本,首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。 现在，我们要把当前版本回退到上一个版本，就可以使用git reset命令：git reset --hard HEAD^ 如果想撤销回退，该怎么办呢？只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个commit id是1094adb...，于是就可以指定回到未来的某个版本：git reset --hard 1094a Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向想要恢复的版本，git会记录每次提交，使用git reflog用来记录你的每一次命令：git reflog 小结 git add .将工作区修改添加至暂存区，git commit -m \"comment\"把暂存区的所有内容提交到当前分支 git checkout -- readme.txt这个文件回到最近一次git commit或git add时的状态 git reset HEAD 丢弃暂存区 git reset --hard HEAD^或者git reset --hard 1094a回到之前版本,版本号可以通过git log查看 git reflog查看命令历史要重返未来，以便确定要回到未来的哪个版本。 "},"docs/tools/git的使用/2. 分支的管理.html":{"url":"docs/tools/git的使用/2. 分支的管理.html","title":"分支的管理","keywords":"","body":" 分支的创建与合并 冲突的解决 小结 分支的管理 分支的创建与合并 git使用指针HEAD指向工作的分支，一般主分支为master,而master指向每次的commit,所以每次提交，master都会往前走一步，当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上： 创建dev分支，然后切换到dev分支： git checkout -b dev 如果只是切换分支，只需要git checkout dev就可以了。 然后，用git branch命令查看当前分支： git branch命令会列出所有分支，当前分支前面会标一个*号。 现在，我们把dev分支的工作成果合并到master分支上： git checkout master git merge dev git merge命令用于合并指定分支到当前分支 之后就可以删除dev分支git branch -d dev 冲突的解决 如果master分支和dev分支各自都分别有新的提交，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突 $ git status On branch master Your branch is ahead of 'origin/master' by 2 commits. (use \"git push\" to publish your local commits) You have unmerged paths. (fix conflicts and run \"git commit\") (use \"git merge --abort\" to abort the merge) Unmerged paths: (use \"git add ...\" to mark resolution) both modified: readme.txt no changes added to commit (use \"git add\" and/or \"git commit -a\") 我们可以直接查看readme.txt的内容： Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage. Git tracks changes of files. >>>>>> feature1 Git用，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存再提交： 小结 查看分支：git branch 创建分支：git branch 切换分支：git checkout 或者git switch 创建+切换分支：git checkout -b 或者git switch -c 合并某分支到当前分支：git merge 删除分支：git branch -d 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。 用git log --graph命令可以看到分支合并图。 "},"docs/tools/git的使用/3. 远程仓库的管理.html":{"url":"docs/tools/git的使用/3. 远程仓库的管理.html","title":"远程仓库的管理","keywords":"","body":" 添加远程仓库 本地同步远程 克隆远程库 远程仓库的管理 添加远程仓库 git remote add origin git@xxxxx.git 本地同步远程 把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。 git push origin master 克隆远程库 用命令git clone克隆一个本地库： $ git clone git@xxxx.git "},"docs/tools/markdown的使用/Markdown的语法.html":{"url":"docs/tools/markdown的使用/Markdown的语法.html","title":"Markdown的语法","keywords":"","body":" 标题 段落 区块引用 代码区块 强调 列表 分割线 链接 图片 [反斜杠](#反斜杠) 符号'`' 其它： Markdown的语法 Markdown语法主要分为如下几大部分： 标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \\，符号'`'。 标题 两种形式：1）使用=和-标记一级和二级标题。 一级标题=========二级标题--------- 效果： 一级标题 二级标题 2）使用#，可表示1-6级标题。 ### 三级标题#### 四级标题##### 五级标题###### 六级标题 效果： 三级标题 四级标题 五级标题 六级标题 段落 段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。 区块引用 在段落的每行或者只在第一行使用符号>,还可使用多个嵌套引用，如： > 区块引用>> 嵌套引用 效果： 区块引用 嵌套引用 代码区块 代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如普通段落： void main() { printf(\"Hello, Markdown.\"); } 代码区块： void main() { printf(\"Hello, Markdown.\"); } 注意:需要和普通段落之间存在空行。 强调 在强调内容两侧分别加上*或者_，如： *斜体*，_斜体_**粗体**，__粗体__ 效果： 斜体，斜体粗体，粗体 列表 使用·、+、或-标记无序列表，如： -（+*） 第一项 -（+*） 第二项 - （+*）第三项 注意：标记后面最少有一个空格或制表符。若不在引用区块中，必须和前方段落之间存在空行。 效果： 第一项 第二项 第三项 有序列表的标记方式是将上述的符号换成数字,并辅以.，如： 1 . 第一项2 . 第二项3 . 第三项 效果： 第一项 第二项 第三项 分割线 分割线最常使用就是三个或以上*，还可以使用-和_。 链接 链接可以由两种形式生成：行内式和参考式。行内式： [younghz的Markdown库](https:baidu.com\")。 效果： younghz的Markdown库。 参考式： [younghz的Markdown库1][1][younghz的Markdown库2][2][1]:https:baidu.com \"Markdown\"[2]:https:baidu.com \"Markdown\" 效果： younghz的Markdown库1younghz的Markdown库2 注意：上述的[1]:https:://github.com/younghz/Markdown \"Markdown\"不出现在区块中。 图片 添加图片的形式和链接相似，只需在链接的基础上前方加一个！。 反斜杠\\ 相当于反转义作用。使符号成为普通符号。 符号'`' 起到标记作用。如： `ctrl+a` 效果： ctrl+a 其它： 列表的使用(非traditonal markdown)： 用|表示表格纵向边界，表头和表内容用-隔开，并可用:进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。 代码库 链接 MarkDown https://github.com/younghz/Markdown MarkDownCopy https://github.com/younghz/Markdown 关于其它扩展语法可参见具体工具的使用说明。 "},"docs/tools/vim的使用/1.光标的移动.html":{"url":"docs/tools/vim的使用/1.光标的移动.html","title":"光标的移动","keywords":"","body":" 光标的移动 移动光标 单位级 单词级 块级 感谢大佬@ [dofy](https://dofy.gitbook.io/learn-vim/)的分享 光标的移动 欢迎进入第一章，这一章将学习简单的光标移动操作。 如果你已经有了一定基础，这部分可以略过，直接 G 到文档尾部按照操作进入下一章。 移动光标 单位级 h 向左一字符 j 下一行 k 上一行 l 向右一字符 单词级 w or W 向右移动到下一单词开头 e or E 向右移动到单词结尾 b or B 向左移动到单词开头 注意：所有小写单词都是以分词符作为单词界限，大写字母以空格作为界限 在下面字符块中感受一下各种移动吧！ This project's GitHub url is https://github.com/dofy/learn-vim Please clone it to your local folder and open the first file which is named file-one.md via following command \"vim file-one.md\" and welcome to https://yahaha.net :) 块级 gg 到文档第一行 G 到文档最后一行 0 到行首（第 1 列） ^ 到第一个非空白字符 $ 到行尾 H 移动到屏幕顶端 M 移动到屏幕中间 L 移动到屏幕底部 Ctrl-d 向下移动半页 Ctrl-u 向上移动半页 Ctrl-f 向下移动一页 Ctrl-b 向上移动一页 : or gg 跳转到第 N 行 :+ or j 向下跳 N 行 :- or k 向上跳 N 行 注意：所有命令前都可以加一个数字 N，表示对后面的命令执行 N 次，例如你想向下移动 3 行，除了 可以用 :+3 之外，还可以用 3j 来实现同样的效果。另外，上面实际上有两种命令：一种是键入后 立即执行的，比如 gg；还有一种是先输入 : 的（后面还会出现先按 / 的），这类命令需要在 输入完成后按回车执行，后面的教程中也是一样。 现在你可以在当前文件中畅游了，当你熟悉了各种移动操作后就可以通过 G 定位到当前文档到最后 一行，按照提示进入下一章了。 将光标定位到后面文件名的任意位置上，直接敲键盘 gf 进入第二章。 "},"docs/tools/vim的使用/2.打开文件、查找内容.html":{"url":"docs/tools/vim的使用/2.打开文件、查找内容.html","title":"打开文件、查找内容","keywords":"","body":" 打开文件 在 Vim 中打开文件 查找 文档内查找 行内查找 匹配查找 打开文件、查找内容 打开文件 哈，现在你已经在无意间学会了一种在 Vim 中打开文件的方式，虽然这种方式并不是最常用的，但却是最 直接的，尤其是当你的代码中 include 了某文件时，下面介绍另外两种常用的打开方式。 在 Vim 中打开文件 :e 打开名为 filename 的文件，若文件不存在则创建之 :Ex 在 Vim 中打开目录树，光标选中后回车打开对应文件（提示：- 进入上级目录） 查找 文档内查找 * 向后查找光标当前所在单词 # 向前查找光标当前所在单词 / 向后查找指定字符串 ? 向前查找指定字符串 n 继续查找下一个 N 继续查找上一个 注意： n 和 N 是有方向性的，若你之前通过 * 查找，则 n 会继续向文档尾方向查找，N 向文档首方向；反之，若你通过 # 查找，则 n 指向文档首，N 指向文档尾 行内查找 f 当前行内向行尾方向查找并定位到字符 X t 当前行内向行尾方向查找并定位到字符 X 之前 F 当前行内向行首方向查找并定位到字符 X T 当前行内向行首方向查找并定位到字符 X 之后 ; 继续向当前方向查找下一个字符 , 向当前相反方向查找下一个字符 当前文档中有几个 “Vim” 单词，你可以尝试用 * 和 # 进行查找并感受 n 和 N 的方向性。 上面的 “注意” 中有几个字符 \"n\"，你可以在那试试行内查找并感受下 ; 和 , 的方向性。 匹配查找 Vim 中可以使用 % 对 ( 和 )，[ 和 ]，{ 和 } 进行匹配查找，当光标位于其中一个 符号上时，按下 %，光标会跳到与之匹配的另外一个符号上。 在下列文本中的 ()[]{} 字符上按 % 看看效果，连续多按几次。 (function(win, doc) { var n = ((1 + 2) * (3 + 4)) / 7; var a = [1, 2, 3, 4, 5, 6, 7]; var f = function(b) { if(b) { return false; } else { return true; } }; })(window, document); 下一章将介绍文档的修改，在这之前先简单介绍一下 Vim 的 buffer，简单理解 buffer 就是当前 Vim session 的文件历史记录。 现在你的 buffer 中应该已经有两个文件了，你可以用 :buffers 或 :ls 命令查看，看到 buffer 列表了吧，大概是这个样子的： :ls 1 #h \"file-one.md\" line 47 2 %a \"file-two.md\" line 1 Press ENTER or type command to continue 接下来你可以尝试通过以下命令在文件缓存中进行跳转了 :bn 打开缓存中下一个文件 :bp 打开缓存中上一个文件 :b 打开缓存中第 N 个文件 你也可以使用 :bdelete 来删除所要关闭的缓冲区，缩写 :bd。 当然你也可以使用 :Ex 命令，选择 file-three.md 并打开，进入第三章。 "},"docs/tools/vim的使用/3.文档的修改与保存.html":{"url":"docs/tools/vim的使用/3.文档的修改与保存.html","title":"文档的修改与保存","keywords":"","body":" 修改文档 插入 删除（并保存到 Vim 剪贴板） 复制 粘贴 合并 替换 撤销、重做 保存文件 文档的修改与保存 修改文档 你现在已经学会了控制光标、打开文件、切换文件、并在文件中查找内容，这些操作都是在 Vim 的 normal 模式下进行的。现在，是时候进入 Vim 的另外一种模式 —— insert 模式，学习一下如何修改文件了。 插入 i 当前字符前插入 a 当前字符后插入 I 行首插入 A 行尾插入 o 在下一行插入 O 在上一行插入 注意：以上任何一个命令都会使 Vim 进入 insert 模式，进入该模式后光标会发生变化，这时输入的 文字会直接出现在文档中，按 Esc 键或 Ctrl-[ 或 Ctrl-C 退出 insert 模式。 删除（并保存到 Vim 剪贴板） s 删除当前字符，并进入 INSERT 模式 S 删除当前行并保存到 Vim 剪贴板，同时进入 INSERT 模式（等同于 cc） x 删除当前字符，相当于 insert 模式下的 Delete X 删除前一个字符，相当于 insert 模式下的 Backspace dd 删除当前行，并将删除的内容保存到 Vim 剪贴板 d 删除指定内容并保存到 Vim 剪贴板 cc 删除当前行并保存到 Vim 剪贴板，同时进入 INSERT 模式 c 删除指定内容并保存到 Vim 剪贴板，同时进入 INSERT 模式 说明： 部分是对操作内容的描述，如果要删除一个单词，就输入 dw 或者 de，要复制当前 位置到行尾的内容，就输入 y$，要删除后面 3 个字符并插入，就输入 c3l 诸如此类。 复制 yy 复制当前行到 Vim 剪贴板 y 复制指定内容到 Vim 剪贴板 粘贴 p 在当前位置后粘贴 P 在当前位置前粘贴 合并 J 将当前行与下一行合并 尝试在下面的文本中进行复制粘贴练习 删除这一行 粘贴到这一行下面 剪切 ABC 并把它粘贴到 XYZ 前面，使这部分内容看起来像 剪切 并把它粘贴到 ABC XYZ 前面。 替换 r 将当前字符替换为 X gu 将指定的文本转换为小写 gU 将指定的文本转换为大写 :%s/// 查找 search 内容并替换为 replace 内容 尝试修改下列文本的大小写 Change this line to UPPERCASE, THEN TO lowercase. 还有个更好玩的命令 g~，先将光标定位到上面那行文本，执行 0g~$ 看看发生了什么。 撤销、重做 u 撤销 Ctrl-r 重做 保存文件 :w 保存当前文件 :wa 保存全部文件 :wq or ZZ 保存并退出 :q! or ZQ 强制退出，不保存 :saveas 文件另存为 :w 文件另存一份名为 的副本并继续编辑原文件 你可以试着把当前（也许已经改得面目全非的）文件另存一份，然后继续下一章的学习。 "},"docs/tools/vim的使用/4.一些小技巧.html":{"url":"docs/tools/vim的使用/4.一些小技巧.html","title":"一些小技巧","keywords":"","body":" 简单设置 Vim 清除搜索高亮 重复上一次命令 缩进 自动排版 一些小技巧 简单设置 Vim “工欲善其事，必先利其器”。尽管 Vim 非常强大，但默认配置的 Vim 看起来还是比较朴素的，为了适合 我们的开发需求，要对 Vim 进行一些简单的配置。 :set number 显示行号 :set relativenumber 显示相对行号（这个非常重要，慢慢体会） :set hlsearch 搜索结果高亮 :set autoindent 自动缩进 :set smartindent 智能缩进 :set tabstop=4 设置 tab 制表符所占宽度为 4 :set softtabstop=4 设置按 tab 时缩进的宽度为 4 :set shiftwidth=4 设置自动缩进宽度为 4 :set expandtab 缩进时将 tab 制表符转换为空格 :filetype on 开启文件类型检测 :syntax on 开启语法高亮 这里列出的是命令，你可以通过在 Vim 中输入进行设置，但这种方式设置的参数只在本次关闭 Vim 前生效， 如果你退出 Vim 再打开，之前的设置就失效了。 若要永久生效，需要修改 Vim 的一个自动配置文件，一般文件路径是 /home//.vimrc（Linux 系统）或 /Users//.vimrc（Mac OS 系统） 如果没有就新建一个，以 Mac OS 系统为例： 在控制台执行如下命令，每行结尾记得回车 cd ~ vim .vimrc 现在你已经在 Vim 中打开了你的 Vim 专属配置文件，将上面提到的配置复制到你的文件中，记得要删除 每行开头的 : 修改完成执行 :wq 或者 ZZ 保存退出，再次进入 Vim 时，你的这些配置就已经生效了 当然，机智如我也为你准备好了一份 vimrc 样本文件，你可以在控制台执行 cp vimrc.vim ~/.vimrc 直接使用，再次启动 Vim 或在 Vim 中执行 :source ~/.vimrc你的配置就 应该生效了。 [ AD ] 当然你也可以在我维护的另外一个项目 The 7th Vim 中找到一个更为完整的配置方案。 清除搜索高亮 前面提到的配置中，有一项是高亮全部搜索结果 :set hlsearch，其作用是当你执行 / 、?、* 或 # 搜索后高亮所有匹配结果。 如果你已经设置了这个选项，尝试执行 /set 看到效果了吧，搜索结果一目了然，但这有时候也是一种困扰，因为知道搜索结果后高亮就没用了，但高亮 本人并不这样认为，它会一直高亮下去，直到你用 :set nohlsearch 将其关闭。 但这样需要就打开，不需要就关闭也不是个办法，有没有更好的解决方案呢？当然！请看下面的终极答案： 再搜一个不存在的字符串 通常我用来清除搜索高亮的命令是 /lfw，一是因为 lfw 这个组合一般不会出现（不适用于 本文档...），二是这三个字母的组合按起来比较舒服，手指基本不需要怎么移动（你感受一下）。 重复上一次命令 Vim 有一个特殊的命令 .，你可以用它重复执行上一个命令。 按下面的说明进行操作 按 dd 删除本行 按 . 重复删除操作 2. 再删除两行 这行也没了 p 把刚才删掉的粘回来 3. 又多出 6 行 缩进 >> 向右缩进当前行 向左缩进当前行 在这一行上依次按 3>>， 和 看看效果 打酱油行 自动排版 == 自动排版当前行 gg=G 当前文档全文自动排版 == 对从当前行开始的 N 行进行自动排版 =j 对当前行以及向下 N 行进行自动排版 =k 对当前行以及向上 N 行进行自动排版 另外，还可以利用第二章中提到的匹配搜索对代码块进行批量排版，尝试用 gf 命令打开 file-four-demo.js 按照里面的说明进行操作 如果智能缩进设置生效了，执行后会看到如第二章中一样的排版效果。 下一章将介绍分屏和标签页。 "},"docs/tools/vim的使用/5.分屏与标签页.html":{"url":"docs/tools/vim的使用/5.分屏与标签页.html","title":"分屏与标签页","keywords":"","body":" 窗口分屏 分屏方式 窗口跳转 移动分屏 屏幕缩放 标签页 创建标签页 切换标签页 关闭标签页 分屏与标签页 窗口分屏 工作中经常会遇到这种情况，就是需要参照其他文档编辑当前文档（场景：翻译），或者从另外一个文档 copy 代码到当前文档（场景：复制 html 元素类名到 css 文档），这时候就是你最需要分屏的时候。 分屏方式 :split 缩写 :sp or Ctrl-w s 上下分屏 :vsplit 缩写 :vs or Ctrl-w v 左右分屏 :diffsplit 缩写 :diffs diff 模式打开一个分屏，后面可以加上 {filename} 窗口跳转 Ctrl-w w 激活下一个窗口 Ctrl-w j 激活下方窗口 Ctrl-w k 激活上方窗口 Ctrl-w h 激活左侧窗口 Ctrl-w l 激活右侧窗口 移动分屏 Ctrl-w L 移动到最右侧 Ctrl-w H 移动到最左侧 Ctrl-w K 移动到顶部 Ctrl-w J 移动到底部 注意：区分大小写。另外，可以将底部的屏幕移动到右侧，实现上下分屏到左右分屏的转换。 屏幕缩放 Ctrl-w = 平均窗口尺寸 Ctrl-w + 增加高度 Ctrl-w - 缩减高度 Ctrl-w _ 最大高度 Ctrl-w > 增加宽度 Ctrl-w 缩减宽度 Ctrl-w | 最大宽度 实践！实践！实践！ 标签页 第二章中提到过的 buffer 和刚刚讲到的分屏操作都很适合在少量文件之间进行切换， 文件超过 3 个我觉得就不方便了，而标签页则更适合多文件之间的切换。 创建标签页 :tabnew or :tabedit 缩写 :tabe 打开新标签页 Ctrl-w gf 在新标签页中打开当前光标所在位置的文件名 注意：:tabnew 和 :tabedit 后面都可以跟一个 用以在新标签页中 打开指定文件，还可以在 : 后面加一个数字，指出新标签页在列表中的位置（从 0 开始）。 切换标签页 gt or :tabnext 缩写 :tabn 下一个标签页（最后一个会循环到第一个） gT or :tabprevious 缩写 :tabp 上一个标签页（第一个会循环到最后一个） :tabrewind 缩写 :tabr or :tabfirst 缩写 :tabfir 到第一个 :tablast 缩写 :tabl 到最后一个标签页 关闭标签页 :tabclose 缩写 :tabc 关闭当前标签页 :-tabc 关闭上一个标签页 :+tabc 关闭下一个标签页 :tabonly 缩写 :tabo 关闭其他标签页 下一章将介绍块操作。 "},"docs/tools/vim的使用/6.块操作.html":{"url":"docs/tools/vim的使用/6.块操作.html","title":"块操作","keywords":"","body":"块操作 我们经常会遇到这种情况：某处有一个多行文本，我们要把他复制到代码中用来初始化一个数组。 大部分 时候我们会这么做： 写好数组声明； 把内容复制到中括号内（大概长成下面那段文本的样子） 然后行首加 ' 行尾加 ',，重复直到最后一行（想象一下这段文本有50行） 有了 Vim 块操作就不用这么麻烦了，按 014gg，然后跟着选中那一行的指示操作。 var myArray = [ Ctrl-v 进入块操作，$ 到行尾，j 到下一行（做！）。 按 j 到下一行 下面还好多行，干脆来个 4j 多跳几行 https://www.yahaha.net https://www.yahaha.net 以后看好行号再跳！现在按 A 插入，然后输入 完成第一步。 // Oops... 跳多了，没事，按 k 回到上一行 ]; 现在已经完成了第一步，还需要补前面的 '，按 14gg 回到那一行，再操作一次，但是这次有三个 地方要变化一下： 第一行按 $ 时改按 0，因为这次要在行首插入； 末行按 A 时改按 I，块操作中 A 是字符后插入， I 是字符前插入； 最后按 。 最后再做些收尾工作，19gg$x 删掉最后一行结尾处的 ,，然后 14gg7== 把代码缩进一下。 Done! 注意：选择行首行尾的操作也可以在选择完要处理的内容之后执行，即 Ctrl-v jjj$A', 接下来我们说说 Vim 中的宏。 "},"docs/tools/vim的使用/7.vim宏.html":{"url":"docs/tools/vim的使用/7.vim宏.html","title":"Vim 中的宏","keywords":"","body":"Vim 中的宏 宏操作在 Vim 中（甚至任何编辑器中）属于比较复杂的操作了，如果前面的内容都已经掌握了，那么你 已经可以算是一个 Vim 高手了，所以，这位高手，我们不妨再来进阶一下吧。 还记得上一章中把文本转成数组的例子吧，我们还做同样的事，不过这次是用宏来操作。 12gg 跳转到准备开始处理的起始行，按指示进行操作，先看效果后解释。 var myArray = [ 按 qa 开启宏录制，前方高能，连续按 IAjq7@a 我也要 我也要 我也要 我也要 我也要 我也要 我也要 ]; OMG! 发生了什么，有没有惊出一身冷汗，之前两次块操作的结果瞬间就完成了，最后再简单做些收尾工作， 去掉最后一行的逗号，集体缩进一下，搞定！ 下面来解释一下刚才的操作： q 是开启录制宏，a 是给这次宏的录制过程一个存储位置，可以是 0-9 或 a-z； 然后 IAj 是你这次录制的整个宏的操作过程，意思就是行首 插入单引号，行尾插入单引号和逗号，跳到下一行； 接下来的 q 是结束本次宏的录制； @ 是唤起宏，a 是要唤起的宏的名字（存储位置），前面的 7 你应该明白吧，就是执行 7 次。 Tips：@@ 再次唤起最后一次执行的宏。 日常工作中频繁用到的和不怎么用得上的在这七章中应该都已经涉及到了，如果 Vim 中遇到了什么问题， 或者教程中遗漏了什么常规操作，欢迎在 issues 中提出来，我会尽我所能给予回答 或完善到教程中。 再次感谢您的关注！如果爱，请分享。爱极客公园，爱 VIM！ "}}